<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>/2021/09/12/String-Manipulation/</url>
    <content><![CDATA[<h3 id="String-Manipulation"><a href="#String-Manipulation" class="headerlink" title="String-Manipulation"></a>String-Manipulation</h3><hr>
<h4 id="1-1-KMP"><a href="#1-1-KMP" class="headerlink" title="1.1 KMP"></a>1.1 KMP</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* next[] 的含义 ：x[i-next[i]...i-1]=x[0...next[i]-1]</span></span><br><span class="line"><span class="comment">next[i]满足 x[i-z...i-1]=x[0...z-1]的最大值z (x自身匹配) */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kmp_pre</span><span class="params">(<span class="keyword">char</span> x[], <span class="keyword">int</span> m, <span class="keyword">int</span> next[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    j = next[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; m)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">-1</span> != j &amp;&amp; x[i] != x[j])</span><br><span class="line">            j = next[j];</span><br><span class="line">        next[++i] = ++j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* kmpNext[i] : next&#x27;[i]=next[next[next[i]]](直到next&#x27;[i]&lt;0 or x[next&#x27;[i]!=x[i]])</span></span><br><span class="line"><span class="comment">这样预处理会更快一点 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preKMP</span><span class="params">(<span class="keyword">char</span> x[], <span class="keyword">int</span> m, <span class="keyword">int</span> kmpNext[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    j = kmpNext[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; m)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">-1</span> != j &amp;&amp; x[i] != x[j])</span><br><span class="line">            j = kmpNext[j];</span><br><span class="line">        <span class="keyword">if</span> (x[++j] == x[++i])</span><br><span class="line">            kmpNext[i] = kmpNext[j];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            kmpNext[i] = j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 返回x在y中出现的次数可以重叠 */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">KMP_Count</span><span class="params">(<span class="keyword">char</span> x[], <span class="keyword">int</span> m, <span class="keyword">char</span> y[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> next[<span class="number">10010</span>];</span><br><span class="line">    <span class="comment">//x是模式串，y是主串</span></span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//preKMP(x,m,next);</span></span><br><span class="line">    <span class="built_in">kmp_pre</span>(x, m, next);</span><br><span class="line">    i = j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">-1</span> != j &amp;&amp; y[i] != x[j])</span><br><span class="line">            j = next[j];</span><br><span class="line">        ++i;</span><br><span class="line">        ++j;</span><br><span class="line">        <span class="keyword">if</span> (j &gt;= m)</span><br><span class="line">        &#123;</span><br><span class="line">            ans++;</span><br><span class="line">            j = next[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="1-2-e-KMP"><a href="#1-2-e-KMP" class="headerlink" title="1.2 e-KMP"></a>1.2 e-KMP</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* next[i]:x[i....m-1]与x[0...m-1]的最长公共前缀</span></span><br><span class="line"><span class="comment">extend[i]:y[i...n-1]与x[0...m-1]的最长公共前缀 */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pre_EKMP</span><span class="params">(<span class="keyword">char</span> x[], <span class="keyword">int</span> m, <span class="keyword">int</span> next[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    next[<span class="number">0</span>] = m;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (j + <span class="number">1</span> &lt; m &amp;&amp; x[j] == x[j + <span class="number">1</span>])</span><br><span class="line">        j++;</span><br><span class="line">    next[<span class="number">1</span>] = j;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> p = next[k] + k - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> l = next[i - k];</span><br><span class="line">        <span class="keyword">if</span> (i + l &lt; p + <span class="number">1</span>)</span><br><span class="line">            next[i] = l;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            j = <span class="built_in">max</span>(<span class="number">0</span>, p - i + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">while</span> (i + j &lt; m &amp;&amp; x[i + j] == x[j])</span><br><span class="line">                ++j;</span><br><span class="line">            next[i] = j;</span><br><span class="line">            k = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EKMP</span><span class="params">(<span class="keyword">char</span> x[], <span class="keyword">int</span> m, <span class="keyword">char</span> y[], <span class="keyword">int</span> n, <span class="keyword">int</span> next[], <span class="keyword">int</span> extend[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">pre_EKMP</span>(x, m, next);</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (j &lt; n &amp;&amp; j &lt; m &amp;&amp; x[j] == y[j])</span><br><span class="line">        ++j;</span><br><span class="line">    extend[<span class="number">0</span>] = j;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> p = extend[k] + k - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> l = next[i - k];</span><br><span class="line">        <span class="keyword">if</span> (i + l &lt; p + <span class="number">1</span>)</span><br><span class="line">            extend[i] = l;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            j = <span class="built_in">max</span>(<span class="number">0</span>, p - i + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">while</span> (i + j &lt; n &amp;&amp; j &lt; m &amp;&amp; y[i + j] == x[j])</span><br><span class="line">                ++j;</span><br><span class="line">            extend[i] = j;</span><br><span class="line">            k = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="1-3-Manacher"><a href="#1-3-Manacher" class="headerlink" title="1.3 Manacher"></a>1.3 Manacher</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 求解最长回文子串 */</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">110010</span>;</span><br><span class="line"><span class="keyword">char</span> Ma[maxn * <span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> Mp[maxn * <span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Manacher</span><span class="params">(<span class="keyword">char</span> s[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">    Ma[l++] = <span class="string">&#x27;$&#x27;</span>;</span><br><span class="line">    Ma[l++] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        Ma[l++] = s[i];</span><br><span class="line">        Ma[l++] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Ma[l] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> mx = <span class="number">0</span>, id = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        Mp[i] = mx &gt; i ? <span class="built_in">min</span>(Mp[<span class="number">2</span> * id - i], mx - i) : <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (Ma[i + Mp[i]] == Ma[i - Mp[i]])</span><br><span class="line">            Mp[i]++;</span><br><span class="line">        <span class="keyword">if</span> (i + Mp[i] &gt; mx)</span><br><span class="line">        &#123;</span><br><span class="line">            mx = i + Mp[i];</span><br><span class="line">            id = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s) == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">        <span class="built_in">Manacher</span>(s, len);</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span> * len + <span class="number">2</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, Mp[i] - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="1-4-AC自动机"><a href="#1-4-AC自动机" class="headerlink" title="1.4 AC自动机"></a>1.4 AC自动机</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 求解目标串中出现了几个模式串 */</span></span><br><span class="line"><span class="comment">/* HDU2222 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> next[<span class="number">500010</span>][<span class="number">26</span>],fail[<span class="number">500010</span>],end[<span class="number">500010</span>];</span><br><span class="line">    <span class="keyword">int</span> root,l;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">newnode</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;++i)next[l][i]=<span class="number">-1</span>;</span><br><span class="line">        end[l++]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> l<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        l=<span class="number">0</span>;</span><br><span class="line">        root =<span class="built_in">newnode</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">char</span> buf[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len=<span class="built_in">strlen</span>(buf);</span><br><span class="line">        <span class="keyword">int</span> now =root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(next[now][buf[i]-<span class="string">&#x27;a&#x27;</span>]==<span class="number">-1</span>)</span><br><span class="line">            next[now][buf[i]-<span class="string">&#x27;a&#x27;</span>]=<span class="built_in">newnode</span>();</span><br><span class="line">            now=next[now][buf[i]-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        end[now]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span>&#123;</span><br><span class="line">        queue &lt;<span class="keyword">int</span> &gt; Q;</span><br><span class="line">        fail[root]=root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(next[root][i]==<span class="number">-1</span>)</span><br><span class="line">            next[root][i]=root;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                fail[next[root][i]]=root;</span><br><span class="line">                Q.<span class="built_in">push</span>(next[root][i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!Q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="keyword">int</span> now =Q.<span class="built_in">front</span>();</span><br><span class="line">            Q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;++i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(next[now][i]==<span class="number">-1</span>)</span><br><span class="line">                next[now][i]=next[fail[now]][i];</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    fail[next[now][i]]=next[fail[now]][i];</span><br><span class="line">                    Q.<span class="built_in">push</span>(next[now][i]);</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">char</span> buf[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len=<span class="built_in">strlen</span>(buf);</span><br><span class="line">        <span class="keyword">int</span> now=root;</span><br><span class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i)&#123;</span><br><span class="line">            now=next[now][buf[i]-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">            <span class="keyword">int</span> temp=now;</span><br><span class="line">            <span class="keyword">while</span>(temp!=root)&#123;</span><br><span class="line">                res+=end[temp];</span><br><span class="line">                end[temp]=<span class="number">0</span>;</span><br><span class="line">                temp=fail[temp];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1000010</span>];</span><br><span class="line">Trie ac;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">        ac.<span class="built_in">init</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,buf);</span><br><span class="line">            ac.<span class="built_in">insert</span>(buf);</span><br><span class="line">        &#125;</span><br><span class="line">        ac.<span class="built_in">build</span>();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,buf);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ac.<span class="built_in">query</span>(buf));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="1-5-后缀数组"><a href="#1-5-后缀数组" class="headerlink" title="1.5 后缀数组"></a>1.5 后缀数组</h4><h5 id="1-51-DA"><a href="#1-51-DA" class="headerlink" title="1.51 DA"></a>1.51 DA</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* suddix array</span></span><br><span class="line"><span class="comment">倍增算法O(n*logn)</span></span><br><span class="line"><span class="comment">待排序数组长度为n，放在0 n-1中，在最后补一个0，其他大于0</span></span><br><span class="line"><span class="comment">da(str,sa,ranks,height,n); */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">20010</span>;</span><br><span class="line"><span class="keyword">int</span> t1[maxn], t2[maxn], c[maxn]; <span class="comment">//求SA数组需要的中间变量，不需要赋值</span></span><br><span class="line"><span class="comment">/* 待排序的字符串放在s数组中，从s[0]到s[n-1]，长度为n，且最大值小于m，</span></span><br><span class="line"><span class="comment">除s[n-1]外的所以s[i]都大于0,r[n-1]=0</span></span><br><span class="line"><span class="comment">函数结束以后结果放在sa数组中 */</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> *r, <span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> r[a] == r[b] &amp;&amp; r[a + l] == r[b + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">da</span><span class="params">(<span class="keyword">int</span> str[], <span class="keyword">int</span> sa[], <span class="keyword">int</span> ranks[], <span class="keyword">int</span> height[], <span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n++;</span><br><span class="line">    <span class="keyword">int</span> i, j, p, *x = t1, *y = t2;</span><br><span class="line">    <span class="comment">//第一轮基数排序,如果 s 的最大值很大,可改为快速排序</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">        c[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        c[x[i] = str[i]]++;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; m; i++)</span><br><span class="line">        c[i] += c[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        sa[--c[x[i]]] = i;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n; j &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//直接利用 sa 数组排序第二关键字33</span></span><br><span class="line">        <span class="keyword">for</span> (i = n - j; i &lt; n; i++)</span><br><span class="line">            y[p++] = i; <span class="comment">//后面的 j 个数第二关键字为空的最小</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            <span class="keyword">if</span> (sa[i] &gt;= j)</span><br><span class="line">                y[p++] = sa[i] - j; <span class="comment">//这样数组 y 保存的就是按照第二关键字排序的结果</span></span><br><span class="line">                                    <span class="comment">//基数排序第一关键字</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">            c[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            c[x[y[i]]]++;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; m; i++)</span><br><span class="line">            c[i] += c[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">            sa[--c[x[y[i]]]] = y[i];</span><br><span class="line">        <span class="comment">//根据 sa 和 x 数组计算新的 x 数组</span></span><br><span class="line">        <span class="built_in">swap</span>(x, y);</span><br><span class="line">        p = <span class="number">1</span>;</span><br><span class="line">        x[sa[<span class="number">0</span>]] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">            x[sa[i]] = <span class="built_in">cmp</span>(y, sa[i - <span class="number">1</span>], sa[i], j) ? p - <span class="number">1</span> : p++;</span><br><span class="line">        <span class="keyword">if</span> (p &gt;= n)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        m = p; <span class="comment">//下次基数排序的最大值 &#125;</span></span><br><span class="line">        <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">        n--;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">            ranks[sa[i]] = i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (k)</span><br><span class="line">                k--;</span><br><span class="line">            j = sa[ranks[i] - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">while</span> (str[i + k] == str[j + k])</span><br><span class="line">                k++;</span><br><span class="line">            height[ranks[i]] = k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ranks[maxn], height[maxn];</span><br><span class="line"><span class="keyword">int</span> RMQ[maxn];</span><br><span class="line"><span class="keyword">int</span> mm[maxn];</span><br><span class="line"><span class="keyword">int</span> best[<span class="number">20</span>][maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initRMQ</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    mm[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        mm[i] = ((i &amp; (i - <span class="number">1</span>)) == <span class="number">0</span>) ? mm[i - <span class="number">1</span>] + <span class="number">1</span> : mm[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        best[<span class="number">0</span>][i] = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= mm[n]; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j + (<span class="number">1</span> &lt;&lt; i) - <span class="number">1</span> &lt;= n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> a = best[i - <span class="number">1</span>][j];</span><br><span class="line">            <span class="keyword">int</span> b = best[i - <span class="number">1</span>][j + (<span class="number">1</span> &lt;&lt; (i - <span class="number">1</span>))];</span><br><span class="line">            <span class="keyword">if</span> (RMQ[a] &lt; RMQ[b])</span><br><span class="line">                best[i][j] = a;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                best[i][j] = b;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">askRMQ</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    t = mm[b - a + <span class="number">1</span>];</span><br><span class="line">    b -= (<span class="number">1</span> &lt;&lt; t) - <span class="number">1</span>;</span><br><span class="line">    a = best[t][a];</span><br><span class="line">    b = best[t][b];</span><br><span class="line">    <span class="keyword">return</span> RMQ[a] &lt; RMQ[b] ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lcp</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a = ranks[a];</span><br><span class="line">    b = ranks[b];</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b)</span><br><span class="line">        <span class="built_in">swap</span>(a, b);</span><br><span class="line">    <span class="keyword">return</span> height[<span class="built_in">askRMQ</span>(a + <span class="number">1</span>, b)];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> str[maxn];</span><br><span class="line"><span class="keyword">int</span> r[maxn];</span><br><span class="line"><span class="keyword">int</span> sa[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, str) == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(str);</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">2</span> * len + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">            r[i] = str[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">            r[len + <span class="number">1</span> + i] = str[len - <span class="number">1</span> - i];</span><br><span class="line">        r[len] = <span class="number">1</span>;</span><br><span class="line">        r[n] = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">da</span>(r, sa, ranks, height, n, <span class="number">128</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            RMQ[i] = height[i];</span><br><span class="line">        <span class="built_in">initRMQ</span>(n);</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>, st;</span><br><span class="line">        <span class="keyword">int</span> tmp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            tmp = <span class="built_in">lcp</span>(i, n - i); <span class="comment">//偶对称</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="number">2</span> * tmp &gt; ans)</span><br><span class="line">            &#123;</span><br><span class="line">                ans = <span class="number">2</span> * tmp;</span><br><span class="line">                st = i - tmp;</span><br><span class="line">            &#125;</span><br><span class="line">            tmp = <span class="built_in">lcp</span>(i, n - i - <span class="number">1</span>); <span class="comment">//奇数对称</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="number">2</span> * tmp - <span class="number">1</span> &gt; ans)</span><br><span class="line">            &#123;</span><br><span class="line">                ans = <span class="number">2</span> * tmp - <span class="number">1</span>;</span><br><span class="line">                st = i - tmp + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        str[st + ans] = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, str + st);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="1-52-DC3"><a href="#1-52-DC3" class="headerlink" title="1.52 DC3"></a>1.52 DC3</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 2 * 后缀数组3 * DC3 算法,复杂度 O(n) 4 * 所有的相关数组都要开三倍5 */</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2010</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F(x) ((x) / 3 + ((x) % 3 == 1 ? 0 : tb))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> G(x) ((x) &lt; tb ? (x)*3 + 1 : ((x)-tb) * 3 + 2)</span></span><br><span class="line"><span class="keyword">int</span> wa[MAXN * <span class="number">3</span>], wb[MAXN * <span class="number">3</span>], wv[MAXN * <span class="number">3</span>], wss[MAXN * <span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">c0</span><span class="params">(<span class="keyword">int</span> *r, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> r[a] == r[b] &amp;&amp; r[a + <span class="number">1</span>] == r[b + <span class="number">1</span>] &amp;&amp; r[a + <span class="number">2</span>] == r[b + <span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">c12</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> *r, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> r[a] &lt; r[b] || (r[a] == r[b] &amp;&amp; <span class="built_in">c12</span>(<span class="number">1</span>, r, a + <span class="number">1</span>, b + <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> r[a] &lt; r[b] || (r[a] == r[b] &amp;&amp; wv[a + <span class="number">1</span>] &lt; wv[b + <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> *r, <span class="keyword">int</span> *a, <span class="keyword">int</span> *b, <span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        wv[i] = r[a[i]];</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">        wss[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        wss[wv[i]]++;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; m; i++)</span><br><span class="line">        wss[i] += wss[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        b[--wss[wv[i]]] = a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dc3</span><span class="params">(<span class="keyword">int</span> *r, <span class="keyword">int</span> *sa, <span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, *rn = r + n;</span><br><span class="line">    <span class="keyword">int</span> *san = sa + n, ta = <span class="number">0</span>, tb = (n + <span class="number">1</span>) / <span class="number">3</span>, tbc = <span class="number">0</span>, p;</span><br><span class="line">    r[n] = r[n + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">3</span> != <span class="number">0</span>)</span><br><span class="line">            wa[tbc++] = i;</span><br><span class="line">    <span class="built_in">sort</span>(r + <span class="number">2</span>, wa, wb, tbc, m);</span><br><span class="line">    <span class="built_in">sort</span>(r + <span class="number">1</span>, wb, wa, tbc, m);</span><br><span class="line">    <span class="built_in">sort</span>(r, wa, wb, tbc, m);</span><br><span class="line">    <span class="keyword">for</span> (p = <span class="number">1</span>, rn[<span class="built_in">F</span>(wb[<span class="number">0</span>])] = <span class="number">0</span>, i = <span class="number">1</span>; i &lt; tbc; i++)</span><br><span class="line">        rn[<span class="built_in">F</span>(wb[i])] = <span class="built_in">c0</span>(r, wb[i - <span class="number">1</span>], wb[i]) ? p - <span class="number">1</span> : p++;</span><br><span class="line">    <span class="keyword">if</span> (p &lt; tbc)</span><br><span class="line">        <span class="built_in">dc3</span>(rn, san, tbc, p);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; tbc; i++)</span><br><span class="line">            san[rn[i]] = i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; tbc; i++)</span><br><span class="line">        <span class="keyword">if</span> (san[i] &lt; tb)</span><br><span class="line">            wb[ta++] = san[i] * <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">if</span> (n % <span class="number">3</span> == <span class="number">1</span>)</span><br><span class="line">        wb[ta++] = n - <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">sort</span>(r, wb, wa, ta, m);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; tbc; i++)</span><br><span class="line">        wv[wb[i] = <span class="built_in">G</span>(san[i])] = i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>, j = <span class="number">0</span>, p = <span class="number">0</span>; i &lt; ta &amp;&amp; j &lt; tbc; p++)</span><br><span class="line">        sa[p] = <span class="built_in">c12</span>(wb[j] % <span class="number">3</span>, r, wa[i], wb[j]) ? wa[i++] : wb[j++];</span><br><span class="line">    <span class="keyword">for</span> (; i &lt; ta; p++)</span><br><span class="line">        sa[p] = wa[i++];</span><br><span class="line">    <span class="keyword">for</span> (; j &lt; tbc; p++)</span><br><span class="line">        sa[p] = wb[j++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//str 和 sa 也要三倍</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">da</span><span class="params">(<span class="keyword">int</span> str[], <span class="keyword">int</span> sa[], <span class="keyword">int</span> rank[], <span class="keyword">int</span> height[], <span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &lt; n * <span class="number">3</span>; i++)</span><br><span class="line">        str[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">dc3</span>(str, sa, n + <span class="number">1</span>, m);</span><br><span class="line">    <span class="keyword">int</span> i, j, k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">        rank[sa[i]] = i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (k)</span><br><span class="line">            k--;</span><br><span class="line">        j = sa[rank[i] - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">while</span> (str[i + k] == str[j + k])</span><br><span class="line">            k++;</span><br><span class="line">        height[rank[i]] = k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="1-6-后缀自动机"><a href="#1-6-后缀自动机" class="headerlink" title="1.6 后缀自动机"></a>1.6 后缀自动机</h4><h5 id="1-61-基本函数"><a href="#1-61-基本函数" class="headerlink" title="1.61 基本函数"></a>1.61 基本函数</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> CHAR = <span class="number">26</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">250010</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SAM_Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    SAM_Node *fa, *next[CHAR];</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> cnt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        fa = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(next, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(next));</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; pool[MAXN * <span class="number">2</span>];</span><br><span class="line">SAM_Node *root, *tail;</span><br><span class="line"><span class="function">SAM_Node *<span class="title">newnode</span><span class="params">(<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SAM_Node *cur = tail++;</span><br><span class="line">    cur-&gt;<span class="built_in">clear</span>();</span><br><span class="line">    cur-&gt;len = len;</span><br><span class="line">    <span class="keyword">return</span> cur;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SAM_init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tail = pool;</span><br><span class="line">    root - <span class="built_in">newnode</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">SAM_Node *<span class="title">extend</span><span class="params">(SAM_Node *last, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SAM_Node *p = last, *np = <span class="built_in">newnode</span>(p-&gt;len + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span> (p &amp;&amp; !p-&gt;next[x])</span><br><span class="line">        p-&gt;next[x] = np, p = p-&gt;fa;</span><br><span class="line">    <span class="keyword">if</span> (!p)</span><br><span class="line">        np-&gt;fa = root;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        SAM_Node *q = p-&gt;next[x];</span><br><span class="line">        <span class="keyword">if</span> (q-&gt;len == p-&gt;len + <span class="number">1</span>)</span><br><span class="line">            np-&gt;fa = q;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            SAM_Node *nq = <span class="built_in">newnode</span>(p-&gt;len + <span class="number">1</span>);</span><br><span class="line">            <span class="built_in">memcpy</span>(nq-&gt;next, q-&gt;next, <span class="built_in"><span class="keyword">sizeof</span></span>(q-&gt;next));</span><br><span class="line">            nq-&gt;fa = q-&gt;fa;</span><br><span class="line">            q-&gt;fa = np-&gt;fa = nq;</span><br><span class="line">            <span class="keyword">while</span> (p &amp;&amp; p-&gt;next[x] == q)</span><br><span class="line">                p-&gt;next[x] = nq, p = p-&gt;fa;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> np;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="1-7-字符串-hash"><a href="#1-7-字符串-hash" class="headerlink" title="1.7 字符串 hash"></a>1.7 字符串 hash</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//HDU 4622 区间不同子串个数</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> HASH = <span class="number">10007</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2010</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">HASHMAP</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> head[HASH], next[MAXN], size;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> state[MAXN];</span><br><span class="line">    <span class="keyword">int</span> f[MAXN];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(head));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> val, <span class="keyword">int</span> _id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> h = val % HASH;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[h]; i != <span class="number">-1</span>; i = next[i])</span><br><span class="line">            <span class="keyword">if</span> (val == state[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = f[i];</span><br><span class="line">                f[i] = _id;</span><br><span class="line">                <span class="keyword">return</span> tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        f[size] = _id;</span><br><span class="line">        state[size] = val;</span><br><span class="line">        next[size] = head[h];</span><br><span class="line">        head[h] = size++;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125; H;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> SEED = <span class="number">13331</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> P[MAXN];</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> S[MAXN];</span><br><span class="line"><span class="keyword">char</span> str[MAXN];</span><br><span class="line"><span class="keyword">int</span> ans[MAXN][MAXN];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    P[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; MAXN; i++)</span><br><span class="line">        P[i] = P[i - <span class="number">1</span>] * SEED;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, str);</span><br><span class="line">        <span class="keyword">int</span> n = <span class="built_in">strlen</span>(str);</span><br><span class="line">        S[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            S[i] = S[i - <span class="number">1</span>] * SEED + str[i - <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">memset</span>(ans, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(ans));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> L = <span class="number">1</span>; L &lt;= n; L++)</span><br><span class="line">        &#123;</span><br><span class="line">            H.<span class="built_in">init</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i + L - <span class="number">1</span> &lt;= n; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> l = H.<span class="built_in">insert</span>(S[i + L - <span class="number">1</span>] - S[i - <span class="number">1</span>] * P[L], i);</span><br><span class="line">                ans[i][i + L - <span class="number">1</span>]++;</span><br><span class="line">                ans[l][i + L - <span class="number">1</span>]--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= n; j++)</span><br><span class="line">                ans[i][j] += ans[i + <span class="number">1</span>][j] + ans[i][j - <span class="number">1</span>] - ans[i + <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> m, u, v;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line">        <span class="keyword">while</span> (m--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans[u][v]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
</search>
