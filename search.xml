<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>String-Manipulation</title>
    <url>/2021/09/12/String-Manipulation/</url>
    <content><![CDATA[<p>文章内容全部来源于kuangbin的ACM模版,本网页内容仅分享交流使用,<br>如果不同意转载,请联系删除  email: <a href="mailto:&#x78;&#105;&#x61;&#109;&#x75;&#x6a;&#105;&#110;&#x35;&#x35;&#x40;&#103;&#x6d;&#97;&#105;&#x6c;&#46;&#x63;&#x6f;&#109;">&#x78;&#105;&#x61;&#109;&#x75;&#x6a;&#105;&#110;&#x35;&#x35;&#x40;&#103;&#x6d;&#97;&#105;&#x6c;&#46;&#x63;&#x6f;&#109;</a></p>
<p>All the content of this article comes from the ACM template of kuangbin. The content of this page is only shared and used,<br>If you do not agree to reprint, please contact to delete</p>
<h3 id="String-Manipulation"><a href="#String-Manipulation" class="headerlink" title="String-Manipulation"></a>String-Manipulation</h3><hr>
<h4 id="1-1-KMP"><a href="#1-1-KMP" class="headerlink" title="1.1 KMP"></a>1.1 KMP</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* next[] 的含义 ：x[i-next[i]...i-1]=x[0...next[i]-1]</span></span><br><span class="line"><span class="comment">next[i]满足 x[i-z...i-1]=x[0...z-1]的最大值z (x自身匹配) */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kmp_pre</span><span class="params">(<span class="keyword">char</span> x[], <span class="keyword">int</span> m, <span class="keyword">int</span> next[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    j = next[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; m)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">-1</span> != j &amp;&amp; x[i] != x[j])</span><br><span class="line">            j = next[j];</span><br><span class="line">        next[++i] = ++j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* kmpNext[i] : next&#x27;[i]=next[next[next[i]]](直到next&#x27;[i]&lt;0 or x[next&#x27;[i]!=x[i]])</span></span><br><span class="line"><span class="comment">这样预处理会更快一点 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preKMP</span><span class="params">(<span class="keyword">char</span> x[], <span class="keyword">int</span> m, <span class="keyword">int</span> kmpNext[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    j = kmpNext[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; m)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">-1</span> != j &amp;&amp; x[i] != x[j])</span><br><span class="line">            j = kmpNext[j];</span><br><span class="line">        <span class="keyword">if</span> (x[++j] == x[++i])</span><br><span class="line">            kmpNext[i] = kmpNext[j];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            kmpNext[i] = j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 返回x在y中出现的次数可以重叠 */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">KMP_Count</span><span class="params">(<span class="keyword">char</span> x[], <span class="keyword">int</span> m, <span class="keyword">char</span> y[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> next[<span class="number">10010</span>];</span><br><span class="line">    <span class="comment">//x是模式串，y是主串</span></span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//preKMP(x,m,next);</span></span><br><span class="line">    <span class="built_in">kmp_pre</span>(x, m, next);</span><br><span class="line">    i = j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">-1</span> != j &amp;&amp; y[i] != x[j])</span><br><span class="line">            j = next[j];</span><br><span class="line">        ++i;</span><br><span class="line">        ++j;</span><br><span class="line">        <span class="keyword">if</span> (j &gt;= m)</span><br><span class="line">        &#123;</span><br><span class="line">            ans++;</span><br><span class="line">            j = next[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="1-2-e-KMP"><a href="#1-2-e-KMP" class="headerlink" title="1.2 e-KMP"></a>1.2 e-KMP</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* next[i]:x[i....m-1]与x[0...m-1]的最长公共前缀</span></span><br><span class="line"><span class="comment">extend[i]:y[i...n-1]与x[0...m-1]的最长公共前缀 */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pre_EKMP</span><span class="params">(<span class="keyword">char</span> x[], <span class="keyword">int</span> m, <span class="keyword">int</span> next[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    next[<span class="number">0</span>] = m;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (j + <span class="number">1</span> &lt; m &amp;&amp; x[j] == x[j + <span class="number">1</span>])</span><br><span class="line">        j++;</span><br><span class="line">    next[<span class="number">1</span>] = j;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> p = next[k] + k - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> l = next[i - k];</span><br><span class="line">        <span class="keyword">if</span> (i + l &lt; p + <span class="number">1</span>)</span><br><span class="line">            next[i] = l;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            j = <span class="built_in">max</span>(<span class="number">0</span>, p - i + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">while</span> (i + j &lt; m &amp;&amp; x[i + j] == x[j])</span><br><span class="line">                ++j;</span><br><span class="line">            next[i] = j;</span><br><span class="line">            k = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EKMP</span><span class="params">(<span class="keyword">char</span> x[], <span class="keyword">int</span> m, <span class="keyword">char</span> y[], <span class="keyword">int</span> n, <span class="keyword">int</span> next[], <span class="keyword">int</span> extend[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">pre_EKMP</span>(x, m, next);</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (j &lt; n &amp;&amp; j &lt; m &amp;&amp; x[j] == y[j])</span><br><span class="line">        ++j;</span><br><span class="line">    extend[<span class="number">0</span>] = j;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> p = extend[k] + k - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> l = next[i - k];</span><br><span class="line">        <span class="keyword">if</span> (i + l &lt; p + <span class="number">1</span>)</span><br><span class="line">            extend[i] = l;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            j = <span class="built_in">max</span>(<span class="number">0</span>, p - i + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">while</span> (i + j &lt; n &amp;&amp; j &lt; m &amp;&amp; y[i + j] == x[j])</span><br><span class="line">                ++j;</span><br><span class="line">            extend[i] = j;</span><br><span class="line">            k = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="1-3-Manacher"><a href="#1-3-Manacher" class="headerlink" title="1.3 Manacher"></a>1.3 Manacher</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 求解最长回文子串 */</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">110010</span>;</span><br><span class="line"><span class="keyword">char</span> Ma[maxn * <span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> Mp[maxn * <span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Manacher</span><span class="params">(<span class="keyword">char</span> s[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">    Ma[l++] = <span class="string">&#x27;$&#x27;</span>;</span><br><span class="line">    Ma[l++] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        Ma[l++] = s[i];</span><br><span class="line">        Ma[l++] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Ma[l] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> mx = <span class="number">0</span>, id = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        Mp[i] = mx &gt; i ? <span class="built_in">min</span>(Mp[<span class="number">2</span> * id - i], mx - i) : <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (Ma[i + Mp[i]] == Ma[i - Mp[i]])</span><br><span class="line">            Mp[i]++;</span><br><span class="line">        <span class="keyword">if</span> (i + Mp[i] &gt; mx)</span><br><span class="line">        &#123;</span><br><span class="line">            mx = i + Mp[i];</span><br><span class="line">            id = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s) == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">        <span class="built_in">Manacher</span>(s, len);</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span> * len + <span class="number">2</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, Mp[i] - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="1-4-AC自动机"><a href="#1-4-AC自动机" class="headerlink" title="1.4 AC自动机"></a>1.4 AC自动机</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 求解目标串中出现了几个模式串 */</span></span><br><span class="line"><span class="comment">/* HDU2222 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> next[<span class="number">500010</span>][<span class="number">26</span>],fail[<span class="number">500010</span>],end[<span class="number">500010</span>];</span><br><span class="line">    <span class="keyword">int</span> root,l;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">newnode</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;++i)next[l][i]=<span class="number">-1</span>;</span><br><span class="line">        end[l++]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> l<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        l=<span class="number">0</span>;</span><br><span class="line">        root =<span class="built_in">newnode</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">char</span> buf[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len=<span class="built_in">strlen</span>(buf);</span><br><span class="line">        <span class="keyword">int</span> now =root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(next[now][buf[i]-<span class="string">&#x27;a&#x27;</span>]==<span class="number">-1</span>)</span><br><span class="line">            next[now][buf[i]-<span class="string">&#x27;a&#x27;</span>]=<span class="built_in">newnode</span>();</span><br><span class="line">            now=next[now][buf[i]-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        end[now]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span>&#123;</span><br><span class="line">        queue &lt;<span class="keyword">int</span> &gt; Q;</span><br><span class="line">        fail[root]=root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(next[root][i]==<span class="number">-1</span>)</span><br><span class="line">            next[root][i]=root;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                fail[next[root][i]]=root;</span><br><span class="line">                Q.<span class="built_in">push</span>(next[root][i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!Q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="keyword">int</span> now =Q.<span class="built_in">front</span>();</span><br><span class="line">            Q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;++i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(next[now][i]==<span class="number">-1</span>)</span><br><span class="line">                next[now][i]=next[fail[now]][i];</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    fail[next[now][i]]=next[fail[now]][i];</span><br><span class="line">                    Q.<span class="built_in">push</span>(next[now][i]);</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">char</span> buf[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len=<span class="built_in">strlen</span>(buf);</span><br><span class="line">        <span class="keyword">int</span> now=root;</span><br><span class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i)&#123;</span><br><span class="line">            now=next[now][buf[i]-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">            <span class="keyword">int</span> temp=now;</span><br><span class="line">            <span class="keyword">while</span>(temp!=root)&#123;</span><br><span class="line">                res+=end[temp];</span><br><span class="line">                end[temp]=<span class="number">0</span>;</span><br><span class="line">                temp=fail[temp];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1000010</span>];</span><br><span class="line">Trie ac;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">        ac.<span class="built_in">init</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,buf);</span><br><span class="line">            ac.<span class="built_in">insert</span>(buf);</span><br><span class="line">        &#125;</span><br><span class="line">        ac.<span class="built_in">build</span>();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,buf);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ac.<span class="built_in">query</span>(buf));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="1-5-后缀数组"><a href="#1-5-后缀数组" class="headerlink" title="1.5 后缀数组"></a>1.5 后缀数组</h4><h5 id="1-51-DA"><a href="#1-51-DA" class="headerlink" title="1.51 DA"></a>1.51 DA</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* suddix array</span></span><br><span class="line"><span class="comment">倍增算法O(n*logn)</span></span><br><span class="line"><span class="comment">待排序数组长度为n，放在0 n-1中，在最后补一个0，其他大于0</span></span><br><span class="line"><span class="comment">da(str,sa,ranks,height,n); */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">20010</span>;</span><br><span class="line"><span class="keyword">int</span> t1[maxn], t2[maxn], c[maxn]; <span class="comment">//求SA数组需要的中间变量，不需要赋值</span></span><br><span class="line"><span class="comment">/* 待排序的字符串放在s数组中，从s[0]到s[n-1]，长度为n，且最大值小于m，</span></span><br><span class="line"><span class="comment">除s[n-1]外的所以s[i]都大于0,r[n-1]=0</span></span><br><span class="line"><span class="comment">函数结束以后结果放在sa数组中 */</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> *r, <span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> r[a] == r[b] &amp;&amp; r[a + l] == r[b + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">da</span><span class="params">(<span class="keyword">int</span> str[], <span class="keyword">int</span> sa[], <span class="keyword">int</span> ranks[], <span class="keyword">int</span> height[], <span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n++;</span><br><span class="line">    <span class="keyword">int</span> i, j, p, *x = t1, *y = t2;</span><br><span class="line">    <span class="comment">//第一轮基数排序,如果 s 的最大值很大,可改为快速排序</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">        c[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        c[x[i] = str[i]]++;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; m; i++)</span><br><span class="line">        c[i] += c[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        sa[--c[x[i]]] = i;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n; j &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//直接利用 sa 数组排序第二关键字33</span></span><br><span class="line">        <span class="keyword">for</span> (i = n - j; i &lt; n; i++)</span><br><span class="line">            y[p++] = i; <span class="comment">//后面的 j 个数第二关键字为空的最小</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            <span class="keyword">if</span> (sa[i] &gt;= j)</span><br><span class="line">                y[p++] = sa[i] - j; <span class="comment">//这样数组 y 保存的就是按照第二关键字排序的结果</span></span><br><span class="line">                                    <span class="comment">//基数排序第一关键字</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">            c[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            c[x[y[i]]]++;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; m; i++)</span><br><span class="line">            c[i] += c[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">            sa[--c[x[y[i]]]] = y[i];</span><br><span class="line">        <span class="comment">//根据 sa 和 x 数组计算新的 x 数组</span></span><br><span class="line">        <span class="built_in">swap</span>(x, y);</span><br><span class="line">        p = <span class="number">1</span>;</span><br><span class="line">        x[sa[<span class="number">0</span>]] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">            x[sa[i]] = <span class="built_in">cmp</span>(y, sa[i - <span class="number">1</span>], sa[i], j) ? p - <span class="number">1</span> : p++;</span><br><span class="line">        <span class="keyword">if</span> (p &gt;= n)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        m = p; <span class="comment">//下次基数排序的最大值 &#125;</span></span><br><span class="line">        <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">        n--;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">            ranks[sa[i]] = i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (k)</span><br><span class="line">                k--;</span><br><span class="line">            j = sa[ranks[i] - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">while</span> (str[i + k] == str[j + k])</span><br><span class="line">                k++;</span><br><span class="line">            height[ranks[i]] = k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ranks[maxn], height[maxn];</span><br><span class="line"><span class="keyword">int</span> RMQ[maxn];</span><br><span class="line"><span class="keyword">int</span> mm[maxn];</span><br><span class="line"><span class="keyword">int</span> best[<span class="number">20</span>][maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initRMQ</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    mm[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        mm[i] = ((i &amp; (i - <span class="number">1</span>)) == <span class="number">0</span>) ? mm[i - <span class="number">1</span>] + <span class="number">1</span> : mm[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        best[<span class="number">0</span>][i] = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= mm[n]; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j + (<span class="number">1</span> &lt;&lt; i) - <span class="number">1</span> &lt;= n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> a = best[i - <span class="number">1</span>][j];</span><br><span class="line">            <span class="keyword">int</span> b = best[i - <span class="number">1</span>][j + (<span class="number">1</span> &lt;&lt; (i - <span class="number">1</span>))];</span><br><span class="line">            <span class="keyword">if</span> (RMQ[a] &lt; RMQ[b])</span><br><span class="line">                best[i][j] = a;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                best[i][j] = b;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">askRMQ</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    t = mm[b - a + <span class="number">1</span>];</span><br><span class="line">    b -= (<span class="number">1</span> &lt;&lt; t) - <span class="number">1</span>;</span><br><span class="line">    a = best[t][a];</span><br><span class="line">    b = best[t][b];</span><br><span class="line">    <span class="keyword">return</span> RMQ[a] &lt; RMQ[b] ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lcp</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a = ranks[a];</span><br><span class="line">    b = ranks[b];</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b)</span><br><span class="line">        <span class="built_in">swap</span>(a, b);</span><br><span class="line">    <span class="keyword">return</span> height[<span class="built_in">askRMQ</span>(a + <span class="number">1</span>, b)];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> str[maxn];</span><br><span class="line"><span class="keyword">int</span> r[maxn];</span><br><span class="line"><span class="keyword">int</span> sa[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, str) == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(str);</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">2</span> * len + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">            r[i] = str[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">            r[len + <span class="number">1</span> + i] = str[len - <span class="number">1</span> - i];</span><br><span class="line">        r[len] = <span class="number">1</span>;</span><br><span class="line">        r[n] = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">da</span>(r, sa, ranks, height, n, <span class="number">128</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            RMQ[i] = height[i];</span><br><span class="line">        <span class="built_in">initRMQ</span>(n);</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>, st;</span><br><span class="line">        <span class="keyword">int</span> tmp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            tmp = <span class="built_in">lcp</span>(i, n - i); <span class="comment">//偶对称</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="number">2</span> * tmp &gt; ans)</span><br><span class="line">            &#123;</span><br><span class="line">                ans = <span class="number">2</span> * tmp;</span><br><span class="line">                st = i - tmp;</span><br><span class="line">            &#125;</span><br><span class="line">            tmp = <span class="built_in">lcp</span>(i, n - i - <span class="number">1</span>); <span class="comment">//奇数对称</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="number">2</span> * tmp - <span class="number">1</span> &gt; ans)</span><br><span class="line">            &#123;</span><br><span class="line">                ans = <span class="number">2</span> * tmp - <span class="number">1</span>;</span><br><span class="line">                st = i - tmp + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        str[st + ans] = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, str + st);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="1-52-DC3"><a href="#1-52-DC3" class="headerlink" title="1.52 DC3"></a>1.52 DC3</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 2 * 后缀数组3 * DC3 算法,复杂度 O(n) 4 * 所有的相关数组都要开三倍5 */</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2010</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F(x) ((x) / 3 + ((x) % 3 == 1 ? 0 : tb))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> G(x) ((x) &lt; tb ? (x)*3 + 1 : ((x)-tb) * 3 + 2)</span></span><br><span class="line"><span class="keyword">int</span> wa[MAXN * <span class="number">3</span>], wb[MAXN * <span class="number">3</span>], wv[MAXN * <span class="number">3</span>], wss[MAXN * <span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">c0</span><span class="params">(<span class="keyword">int</span> *r, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> r[a] == r[b] &amp;&amp; r[a + <span class="number">1</span>] == r[b + <span class="number">1</span>] &amp;&amp; r[a + <span class="number">2</span>] == r[b + <span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">c12</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> *r, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> r[a] &lt; r[b] || (r[a] == r[b] &amp;&amp; <span class="built_in">c12</span>(<span class="number">1</span>, r, a + <span class="number">1</span>, b + <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> r[a] &lt; r[b] || (r[a] == r[b] &amp;&amp; wv[a + <span class="number">1</span>] &lt; wv[b + <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> *r, <span class="keyword">int</span> *a, <span class="keyword">int</span> *b, <span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        wv[i] = r[a[i]];</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">        wss[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        wss[wv[i]]++;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; m; i++)</span><br><span class="line">        wss[i] += wss[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        b[--wss[wv[i]]] = a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dc3</span><span class="params">(<span class="keyword">int</span> *r, <span class="keyword">int</span> *sa, <span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, *rn = r + n;</span><br><span class="line">    <span class="keyword">int</span> *san = sa + n, ta = <span class="number">0</span>, tb = (n + <span class="number">1</span>) / <span class="number">3</span>, tbc = <span class="number">0</span>, p;</span><br><span class="line">    r[n] = r[n + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">3</span> != <span class="number">0</span>)</span><br><span class="line">            wa[tbc++] = i;</span><br><span class="line">    <span class="built_in">sort</span>(r + <span class="number">2</span>, wa, wb, tbc, m);</span><br><span class="line">    <span class="built_in">sort</span>(r + <span class="number">1</span>, wb, wa, tbc, m);</span><br><span class="line">    <span class="built_in">sort</span>(r, wa, wb, tbc, m);</span><br><span class="line">    <span class="keyword">for</span> (p = <span class="number">1</span>, rn[<span class="built_in">F</span>(wb[<span class="number">0</span>])] = <span class="number">0</span>, i = <span class="number">1</span>; i &lt; tbc; i++)</span><br><span class="line">        rn[<span class="built_in">F</span>(wb[i])] = <span class="built_in">c0</span>(r, wb[i - <span class="number">1</span>], wb[i]) ? p - <span class="number">1</span> : p++;</span><br><span class="line">    <span class="keyword">if</span> (p &lt; tbc)</span><br><span class="line">        <span class="built_in">dc3</span>(rn, san, tbc, p);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; tbc; i++)</span><br><span class="line">            san[rn[i]] = i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; tbc; i++)</span><br><span class="line">        <span class="keyword">if</span> (san[i] &lt; tb)</span><br><span class="line">            wb[ta++] = san[i] * <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">if</span> (n % <span class="number">3</span> == <span class="number">1</span>)</span><br><span class="line">        wb[ta++] = n - <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">sort</span>(r, wb, wa, ta, m);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; tbc; i++)</span><br><span class="line">        wv[wb[i] = <span class="built_in">G</span>(san[i])] = i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>, j = <span class="number">0</span>, p = <span class="number">0</span>; i &lt; ta &amp;&amp; j &lt; tbc; p++)</span><br><span class="line">        sa[p] = <span class="built_in">c12</span>(wb[j] % <span class="number">3</span>, r, wa[i], wb[j]) ? wa[i++] : wb[j++];</span><br><span class="line">    <span class="keyword">for</span> (; i &lt; ta; p++)</span><br><span class="line">        sa[p] = wa[i++];</span><br><span class="line">    <span class="keyword">for</span> (; j &lt; tbc; p++)</span><br><span class="line">        sa[p] = wb[j++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//str 和 sa 也要三倍</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">da</span><span class="params">(<span class="keyword">int</span> str[], <span class="keyword">int</span> sa[], <span class="keyword">int</span> rank[], <span class="keyword">int</span> height[], <span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &lt; n * <span class="number">3</span>; i++)</span><br><span class="line">        str[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">dc3</span>(str, sa, n + <span class="number">1</span>, m);</span><br><span class="line">    <span class="keyword">int</span> i, j, k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">        rank[sa[i]] = i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (k)</span><br><span class="line">            k--;</span><br><span class="line">        j = sa[rank[i] - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">while</span> (str[i + k] == str[j + k])</span><br><span class="line">            k++;</span><br><span class="line">        height[rank[i]] = k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="1-6-后缀自动机"><a href="#1-6-后缀自动机" class="headerlink" title="1.6 后缀自动机"></a>1.6 后缀自动机</h4><h5 id="1-61-基本函数"><a href="#1-61-基本函数" class="headerlink" title="1.61 基本函数"></a>1.61 基本函数</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> CHAR = <span class="number">26</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">250010</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SAM_Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    SAM_Node *fa, *next[CHAR];</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> cnt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        fa = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(next, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(next));</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; pool[MAXN * <span class="number">2</span>];</span><br><span class="line">SAM_Node *root, *tail;</span><br><span class="line"><span class="function">SAM_Node *<span class="title">newnode</span><span class="params">(<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SAM_Node *cur = tail++;</span><br><span class="line">    cur-&gt;<span class="built_in">clear</span>();</span><br><span class="line">    cur-&gt;len = len;</span><br><span class="line">    <span class="keyword">return</span> cur;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SAM_init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tail = pool;</span><br><span class="line">    root - <span class="built_in">newnode</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">SAM_Node *<span class="title">extend</span><span class="params">(SAM_Node *last, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SAM_Node *p = last, *np = <span class="built_in">newnode</span>(p-&gt;len + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span> (p &amp;&amp; !p-&gt;next[x])</span><br><span class="line">        p-&gt;next[x] = np, p = p-&gt;fa;</span><br><span class="line">    <span class="keyword">if</span> (!p)</span><br><span class="line">        np-&gt;fa = root;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        SAM_Node *q = p-&gt;next[x];</span><br><span class="line">        <span class="keyword">if</span> (q-&gt;len == p-&gt;len + <span class="number">1</span>)</span><br><span class="line">            np-&gt;fa = q;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            SAM_Node *nq = <span class="built_in">newnode</span>(p-&gt;len + <span class="number">1</span>);</span><br><span class="line">            <span class="built_in">memcpy</span>(nq-&gt;next, q-&gt;next, <span class="built_in"><span class="keyword">sizeof</span></span>(q-&gt;next));</span><br><span class="line">            nq-&gt;fa = q-&gt;fa;</span><br><span class="line">            q-&gt;fa = np-&gt;fa = nq;</span><br><span class="line">            <span class="keyword">while</span> (p &amp;&amp; p-&gt;next[x] == q)</span><br><span class="line">                p-&gt;next[x] = nq, p = p-&gt;fa;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> np;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="1-7-字符串-hash"><a href="#1-7-字符串-hash" class="headerlink" title="1.7 字符串 hash"></a>1.7 字符串 hash</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//HDU 4622 区间不同子串个数</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> HASH = <span class="number">10007</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2010</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">HASHMAP</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> head[HASH], next[MAXN], size;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> state[MAXN];</span><br><span class="line">    <span class="keyword">int</span> f[MAXN];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(head));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> val, <span class="keyword">int</span> _id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> h = val % HASH;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[h]; i != <span class="number">-1</span>; i = next[i])</span><br><span class="line">            <span class="keyword">if</span> (val == state[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = f[i];</span><br><span class="line">                f[i] = _id;</span><br><span class="line">                <span class="keyword">return</span> tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        f[size] = _id;</span><br><span class="line">        state[size] = val;</span><br><span class="line">        next[size] = head[h];</span><br><span class="line">        head[h] = size++;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125; H;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> SEED = <span class="number">13331</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> P[MAXN];</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> S[MAXN];</span><br><span class="line"><span class="keyword">char</span> str[MAXN];</span><br><span class="line"><span class="keyword">int</span> ans[MAXN][MAXN];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    P[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; MAXN; i++)</span><br><span class="line">        P[i] = P[i - <span class="number">1</span>] * SEED;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, str);</span><br><span class="line">        <span class="keyword">int</span> n = <span class="built_in">strlen</span>(str);</span><br><span class="line">        S[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            S[i] = S[i - <span class="number">1</span>] * SEED + str[i - <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">memset</span>(ans, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(ans));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> L = <span class="number">1</span>; L &lt;= n; L++)</span><br><span class="line">        &#123;</span><br><span class="line">            H.<span class="built_in">init</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i + L - <span class="number">1</span> &lt;= n; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> l = H.<span class="built_in">insert</span>(S[i + L - <span class="number">1</span>] - S[i - <span class="number">1</span>] * P[L], i);</span><br><span class="line">                ans[i][i + L - <span class="number">1</span>]++;</span><br><span class="line">                ans[l][i + L - <span class="number">1</span>]--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= n; j++)</span><br><span class="line">                ans[i][j] += ans[i + <span class="number">1</span>][j] + ans[i][j - <span class="number">1</span>] - ans[i + <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> m, u, v;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line">        <span class="keyword">while</span> (m--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans[u][v]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>template</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>Template</tag>
      </tags>
  </entry>
  <entry>
    <title>Computational-Geometry</title>
    <url>/2021/09/12/Computational-Geometry/</url>
    <content><![CDATA[<p>文章内容全部来源于kuangbin的ACM模版,本网页内容仅分享交流使用,<br>如果不同意转载,请联系删除  email: <a href="mailto:&#x78;&#x69;&#97;&#109;&#117;&#x6a;&#x69;&#x6e;&#x35;&#53;&#64;&#x67;&#109;&#97;&#x69;&#108;&#x2e;&#99;&#x6f;&#x6d;">&#x78;&#x69;&#97;&#109;&#117;&#x6a;&#x69;&#x6e;&#x35;&#53;&#64;&#x67;&#109;&#97;&#x69;&#108;&#x2e;&#99;&#x6f;&#x6d;</a></p>
<p>All the content of this article comes from the ACM template of kuangbin. The content of this page is only shared and used,<br>If you do not agree to reprint, please contact to delete</p>
<hr>
<h3 id="Computational-Geometry"><a href="#Computational-Geometry" class="headerlink" title="Computational-Geometry"></a>Computational-Geometry</h3><hr>
<h4 id="7-1-二维几何"><a href="#7-1-二维几何" class="headerlink" title="7.1 二维几何"></a>7.1 二维几何</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> inf = <span class="number">1e20</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxp = <span class="number">1010</span>;</span><br><span class="line"><span class="comment">//`Compares a double to zero`</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sgn</span><span class="params">(<span class="keyword">double</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">fabs</span>(x) &lt; eps)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//square of a double</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">sqr</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123; <span class="keyword">return</span> x * x; &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Point</span></span><br><span class="line"><span class="comment"> * Point()               - Empty constructor</span></span><br><span class="line"><span class="comment"> * Point(double _x,double _y)  - constructor</span></span><br><span class="line"><span class="comment"> * input()             - double input</span></span><br><span class="line"><span class="comment"> * output()            - %.2f output</span></span><br><span class="line"><span class="comment"> * operator ==         - compares x and y</span></span><br><span class="line"><span class="comment"> * operator &lt;          - compares first by x, then by y</span></span><br><span class="line"><span class="comment"> * operator -          - return new Point after subtracting curresponging x and y</span></span><br><span class="line"><span class="comment"> * operator ^          - cross product of 2d points</span></span><br><span class="line"><span class="comment"> * operator *          - dot product</span></span><br><span class="line"><span class="comment"> * len()               - gives length from origin</span></span><br><span class="line"><span class="comment"> * len2()              - gives square of length from origin</span></span><br><span class="line"><span class="comment"> * distance(Point p)   - gives distance from p</span></span><br><span class="line"><span class="comment"> * operator + Point b  - returns new Point after adding curresponging x and y</span></span><br><span class="line"><span class="comment"> * operator * double k - returns new Point after multiplieing x and y by k</span></span><br><span class="line"><span class="comment"> * operator / double k - returns new Point after divideing x and y by k</span></span><br><span class="line"><span class="comment"> * rad(Point a,Point b)- returns the angle of Point a and Point b from this Point</span></span><br><span class="line"><span class="comment"> * trunc(double r)     - return Point that if truncated the distance from center to r</span></span><br><span class="line"><span class="comment"> * rotleft()           - returns 90 degree ccw rotated point</span></span><br><span class="line"><span class="comment"> * rotright()          - returns 90 degree cw rotated point</span></span><br><span class="line"><span class="comment"> * rotate(Point p,double angle) - returns Point after rotateing the Point centering at p by angle radian ccw</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x, y;</span><br><span class="line">    <span class="built_in">Point</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">Point</span>(<span class="keyword">double</span> _x, <span class="keyword">double</span> _y)</span><br><span class="line">    &#123;</span><br><span class="line">        x = _x;</span><br><span class="line">        y = _y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.2f %.2f\n&quot;</span>, x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>==(Point b) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sgn</span>(x - b.x) == <span class="number">0</span> &amp;&amp; <span class="built_in">sgn</span>(y - b.y) == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(Point b) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sgn</span>(x - b.x) == <span class="number">0</span> ? <span class="built_in">sgn</span>(y - b.y) &lt; <span class="number">0</span> : x &lt; b.x;</span><br><span class="line">    &#125;</span><br><span class="line">    Point <span class="keyword">operator</span>-(<span class="keyword">const</span> Point &amp;b) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Point</span>(x - b.x, y - b.y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//叉积</span></span><br><span class="line">    <span class="keyword">double</span> <span class="keyword">operator</span>^(<span class="keyword">const</span> Point &amp;b) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> x * b.y - y * b.x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//点积</span></span><br><span class="line">    <span class="keyword">double</span> <span class="keyword">operator</span>*(<span class="keyword">const</span> Point &amp;b) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> x * b.x + y * b.y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回长度</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">len</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">hypot</span>(x, y); <span class="comment">//库函数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回长度的平方</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">len2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x * x + y * y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回两点的距离</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">distance</span><span class="params">(Point p)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">hypot</span>(x - p.x, y - p.y);</span><br><span class="line">    &#125;</span><br><span class="line">    Point <span class="keyword">operator</span>+(<span class="keyword">const</span> Point &amp;b) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Point</span>(x + b.x, y + b.y);</span><br><span class="line">    &#125;</span><br><span class="line">    Point <span class="keyword">operator</span>*(<span class="keyword">const</span> <span class="keyword">double</span> &amp;k) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Point</span>(x * k, y * k);</span><br><span class="line">    &#125;</span><br><span class="line">    Point <span class="keyword">operator</span>/(<span class="keyword">const</span> <span class="keyword">double</span> &amp;k) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Point</span>(x / k, y / k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//`计算pa  和  pb 的夹角`</span></span><br><span class="line">    <span class="comment">//`就是求这个点看a,b 所成的夹角`</span></span><br><span class="line">    <span class="comment">//`测试 LightOJ1203`</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">rad</span><span class="params">(Point a, Point b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Point p = *<span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">fabs</span>(<span class="built_in">atan2</span>(<span class="built_in">fabs</span>((a - p) ^ (b - p)), (a - p) * (b - p)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//`化为长度为r的向量`</span></span><br><span class="line">    <span class="function">Point <span class="title">trunc</span><span class="params">(<span class="keyword">double</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> l = <span class="built_in">len</span>();</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">sgn</span>(l))</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        r /= l;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Point</span>(x * r, y * r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//`逆时针旋转90度`</span></span><br><span class="line">    <span class="function">Point <span class="title">rotleft</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Point</span>(-y, x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//`顺时针旋转90度`</span></span><br><span class="line">    <span class="function">Point <span class="title">rotright</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Point</span>(y, -x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//`绕着p点逆时针旋转angle`</span></span><br><span class="line">    <span class="function">Point <span class="title">rotate</span><span class="params">(Point p, <span class="keyword">double</span> angle)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Point v = (*<span class="keyword">this</span>) - p;</span><br><span class="line">        <span class="keyword">double</span> c = <span class="built_in">cos</span>(angle), s = <span class="built_in">sin</span>(angle);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Point</span>(p.x + v.x * c - v.y * s, p.y + v.x * s + v.y * c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Stores two points</span></span><br><span class="line"><span class="comment"> * Line()                         - Empty constructor</span></span><br><span class="line"><span class="comment"> * Line(Point _s,Point _e)        - Line through _s and _e</span></span><br><span class="line"><span class="comment"> * operator ==                    - checks if two points are same</span></span><br><span class="line"><span class="comment"> * Line(Point p,double angle)     - one end p , another end at angle degree</span></span><br><span class="line"><span class="comment"> * Line(double a,double b,double c) - Line of equation ax + by + c = 0</span></span><br><span class="line"><span class="comment"> * input()                        - inputs s and e</span></span><br><span class="line"><span class="comment"> * adjust()                       - orders in such a way that s &lt; e</span></span><br><span class="line"><span class="comment"> * length()                       - distance of se</span></span><br><span class="line"><span class="comment"> * angle()                        - return 0 &lt;= angle &lt; pi</span></span><br><span class="line"><span class="comment"> * relation(Point p)              - 3 if point is on line</span></span><br><span class="line"><span class="comment"> *                                  1 if point on the left of line</span></span><br><span class="line"><span class="comment"> *                                  2 if point on the right of line</span></span><br><span class="line"><span class="comment"> * pointonseg(double p)           - return true if point on segment</span></span><br><span class="line"><span class="comment"> * parallel(Line v)               - return true if they are parallel</span></span><br><span class="line"><span class="comment"> * segcrossseg(Line v)            - returns 0 if does not intersect</span></span><br><span class="line"><span class="comment"> *                                  returns 1 if non-standard intersection</span></span><br><span class="line"><span class="comment"> *                                  returns 2 if intersects</span></span><br><span class="line"><span class="comment"> * linecrossseg(Line v)           - line and seg</span></span><br><span class="line"><span class="comment"> * linecrossline(Line v)          - 0 if parallel</span></span><br><span class="line"><span class="comment"> *                                  1 if coincides</span></span><br><span class="line"><span class="comment"> *                                  2 if intersects</span></span><br><span class="line"><span class="comment"> * crosspoint(Line v)             - returns intersection point</span></span><br><span class="line"><span class="comment"> * dispointtoline(Point p)        - distance from point p to the line</span></span><br><span class="line"><span class="comment"> * dispointtoseg(Point p)         - distance from p to the segment</span></span><br><span class="line"><span class="comment"> * dissegtoseg(Line v)            - distance of two segment</span></span><br><span class="line"><span class="comment"> * lineprog(Point p)              - returns projected point p on se line</span></span><br><span class="line"><span class="comment"> * symmetrypoint(Point p)         - returns reflection point of p over se</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Line</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    Point s, e;</span><br><span class="line">    <span class="built_in">Line</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">Line</span>(Point _s, Point _e)</span><br><span class="line">    &#123;</span><br><span class="line">        s = _s;</span><br><span class="line">        e = _e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>==(Line v)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in"><span class="keyword">return</span></span> (s == v.s) &amp;&amp; (e == v.e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//`根据一个点和倾斜角angle确定直线,0&lt;=angle&lt;pi`</span></span><br><span class="line">    <span class="built_in">Line</span>(Point p, <span class="keyword">double</span> angle)</span><br><span class="line">    &#123;</span><br><span class="line">        s = p;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">sgn</span>(angle - pi / <span class="number">2</span>) == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            e = (s + <span class="built_in">Point</span>(<span class="number">0</span>, <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            e = (s + <span class="built_in">Point</span>(<span class="number">1</span>, <span class="built_in">tan</span>(angle)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//ax+by+c=0</span></span><br><span class="line">    <span class="built_in">Line</span>(<span class="keyword">double</span> a, <span class="keyword">double</span> b, <span class="keyword">double</span> c)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">sgn</span>(a) == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            s = <span class="built_in">Point</span>(<span class="number">0</span>, -c / b);</span><br><span class="line">            e = <span class="built_in">Point</span>(<span class="number">1</span>, -c / b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">sgn</span>(b) == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            s = <span class="built_in">Point</span>(-c / a, <span class="number">0</span>);</span><br><span class="line">            e = <span class="built_in">Point</span>(-c / a, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            s = <span class="built_in">Point</span>(<span class="number">0</span>, -c / b);</span><br><span class="line">            e = <span class="built_in">Point</span>(<span class="number">1</span>, (-c - a) / b);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        s.<span class="built_in">input</span>();</span><br><span class="line">        e.<span class="built_in">input</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">adjust</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (e &lt; s)</span><br><span class="line">            <span class="built_in">swap</span>(s, e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//求线段长度</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">length</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s.<span class="built_in">distance</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//`返回直线倾斜角 0&lt;=angle&lt;pi`</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">angle</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> k = <span class="built_in">atan2</span>(e.y - s.y, e.x - s.x);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">sgn</span>(k) &lt; <span class="number">0</span>)</span><br><span class="line">            k += pi;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">sgn</span>(k - pi) == <span class="number">0</span>)</span><br><span class="line">            k -= pi;</span><br><span class="line">        <span class="keyword">return</span> k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//`点和直线关系`</span></span><br><span class="line">    <span class="comment">//`1  在左侧`</span></span><br><span class="line">    <span class="comment">//`2  在右侧`</span></span><br><span class="line">    <span class="comment">//`3  在直线上`</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">relation</span><span class="params">(Point p)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> c = <span class="built_in">sgn</span>((p - s) ^ (e - s));</span><br><span class="line">        <span class="keyword">if</span> (c &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (c &gt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 点在线段上的判断</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">pointonseg</span><span class="params">(Point p)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sgn</span>((p - s) ^ (e - s)) == <span class="number">0</span> &amp;&amp; <span class="built_in">sgn</span>((p - s) * (p - e)) &lt;= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//`两向量平行(对应直线平行或重合)`</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">parallel</span><span class="params">(Line v)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sgn</span>((e - s) ^ (v.e - v.s)) == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//`两线段相交判断`</span></span><br><span class="line">    <span class="comment">//`2 规范相交`</span></span><br><span class="line">    <span class="comment">//`1 非规范相交`</span></span><br><span class="line">    <span class="comment">//`0 不相交`</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">segcrossseg</span><span class="params">(Line v)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> d1 = <span class="built_in">sgn</span>((e - s) ^ (v.s - s));</span><br><span class="line">        <span class="keyword">int</span> d2 = <span class="built_in">sgn</span>((e - s) ^ (v.e - s));</span><br><span class="line">        <span class="keyword">int</span> d3 = <span class="built_in">sgn</span>((v.e - v.s) ^ (s - v.s));</span><br><span class="line">        <span class="keyword">int</span> d4 = <span class="built_in">sgn</span>((v.e - v.s) ^ (e - v.s));</span><br><span class="line">        <span class="keyword">if</span> ((d1 ^ d2) == <span class="number">-2</span> &amp;&amp; (d3 ^ d4) == <span class="number">-2</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> (d1 == <span class="number">0</span> &amp;&amp; <span class="built_in">sgn</span>((v.s - s) * (v.s - e)) &lt;= <span class="number">0</span>) ||</span><br><span class="line">               (d2 == <span class="number">0</span> &amp;&amp; <span class="built_in">sgn</span>((v.e - s) * (v.e - e)) &lt;= <span class="number">0</span>) ||</span><br><span class="line">               (d3 == <span class="number">0</span> &amp;&amp; <span class="built_in">sgn</span>((s - v.s) * (s - v.e)) &lt;= <span class="number">0</span>) ||</span><br><span class="line">               (d4 == <span class="number">0</span> &amp;&amp; <span class="built_in">sgn</span>((e - v.s) * (e - v.e)) &lt;= <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//`直线和线段相交判断`</span></span><br><span class="line">    <span class="comment">//`-*this line   -v seg`</span></span><br><span class="line">    <span class="comment">//`2 规范相交`</span></span><br><span class="line">    <span class="comment">//`1 非规范相交`</span></span><br><span class="line">    <span class="comment">//`0 不相交`</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">linecrossseg</span><span class="params">(Line v)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> d1 = <span class="built_in">sgn</span>((e - s) ^ (v.s - s));</span><br><span class="line">        <span class="keyword">int</span> d2 = <span class="built_in">sgn</span>((e - s) ^ (v.e - s));</span><br><span class="line">        <span class="keyword">if</span> ((d1 ^ d2) == <span class="number">-2</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> (d1 == <span class="number">0</span> || d2 == <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//`两直线关系`</span></span><br><span class="line">    <span class="comment">//`0 平行`</span></span><br><span class="line">    <span class="comment">//`1 重合`</span></span><br><span class="line">    <span class="comment">//`2 相交`</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">linecrossline</span><span class="params">(Line v)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((*<span class="keyword">this</span>).<span class="built_in">parallel</span>(v))</span><br><span class="line">            <span class="keyword">return</span> v.<span class="built_in">relation</span>(s) == <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//`求两直线的交点`</span></span><br><span class="line">    <span class="comment">//`要保证两直线不平行或重合`</span></span><br><span class="line">    <span class="function">Point <span class="title">crosspoint</span><span class="params">(Line v)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> a1 = (v.e - v.s) ^ (s - v.s);</span><br><span class="line">        <span class="keyword">double</span> a2 = (v.e - v.s) ^ (e - v.s);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Point</span>((s.x * a2 - e.x * a1) / (a2 - a1), (s.y * a2 - e.y * a1) / (a2 - a1));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//点到直线的距离</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">dispointtoline</span><span class="params">(Point p)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">fabs</span>((p - s) ^ (e - s)) / <span class="built_in">length</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//点到线段的距离</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">dispointtoseg</span><span class="params">(Point p)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">sgn</span>((p - s) * (e - s)) &lt; <span class="number">0</span> || <span class="built_in">sgn</span>((p - e) * (s - e)) &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">min</span>(p.<span class="built_in">distance</span>(s), p.<span class="built_in">distance</span>(e));</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">dispointtoline</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//`返回线段到线段的距离`</span></span><br><span class="line">    <span class="comment">//`前提是两线段不相交，相交距离就是0了`</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">dissegtoseg</span><span class="params">(Line v)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(<span class="built_in">min</span>(<span class="built_in">dispointtoseg</span>(v.s), <span class="built_in">dispointtoseg</span>(v.e)), <span class="built_in">min</span>(v.<span class="built_in">dispointtoseg</span>(s), v.<span class="built_in">dispointtoseg</span>(e)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//`返回点p在直线上的投影`</span></span><br><span class="line">    <span class="function">Point <span class="title">lineprog</span><span class="params">(Point p)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s + (((e - s) * ((e - s) * (p - s))) / ((e - s).<span class="built_in">len2</span>()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//`返回点p关于直线的对称点`</span></span><br><span class="line">    <span class="function">Point <span class="title">symmetrypoint</span><span class="params">(Point p)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Point q = <span class="built_in">lineprog</span>(p);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Point</span>(<span class="number">2</span> * q.x - p.x, <span class="number">2</span> * q.y - p.y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//圆</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">circle</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    Point p;  <span class="comment">//圆心</span></span><br><span class="line">    <span class="keyword">double</span> r; <span class="comment">//半径</span></span><br><span class="line">    <span class="built_in">circle</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">circle</span>(Point _p, <span class="keyword">double</span> _r)</span><br><span class="line">    &#123;</span><br><span class="line">        p = _p;</span><br><span class="line">        r = _r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">circle</span>(<span class="keyword">double</span> x, <span class="keyword">double</span> y, <span class="keyword">double</span> _r)</span><br><span class="line">    &#123;</span><br><span class="line">        p = <span class="built_in">Point</span>(x, y);</span><br><span class="line">        r = _r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//`三角形的外接圆`</span></span><br><span class="line">    <span class="comment">//`需要Point的+ /  rotate()  以及Line的crosspoint()`</span></span><br><span class="line">    <span class="comment">//`利用两条边的中垂线得到圆心`</span></span><br><span class="line">    <span class="comment">//`测试：UVA12304`</span></span><br><span class="line">    <span class="built_in">circle</span>(Point a, Point b, Point c)</span><br><span class="line">    &#123;</span><br><span class="line">        Line u = <span class="built_in">Line</span>((a + b) / <span class="number">2</span>, ((a + b) / <span class="number">2</span>) + ((b - a).<span class="built_in">rotleft</span>()));</span><br><span class="line">        Line v = <span class="built_in">Line</span>((b + c) / <span class="number">2</span>, ((b + c) / <span class="number">2</span>) + ((c - b).<span class="built_in">rotleft</span>()));</span><br><span class="line">        p = u.<span class="built_in">crosspoint</span>(v);</span><br><span class="line">        r = p.<span class="built_in">distance</span>(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//`三角形的内切圆`</span></span><br><span class="line">    <span class="comment">//`参数bool t没有作用，只是为了和上面外接圆函数区别`</span></span><br><span class="line">    <span class="comment">//`测试：UVA12304`</span></span><br><span class="line">    <span class="built_in">circle</span>(Point a, Point b, Point c, <span class="keyword">bool</span> t)</span><br><span class="line">    &#123;</span><br><span class="line">        Line u, v;</span><br><span class="line">        <span class="keyword">double</span> m = <span class="built_in">atan2</span>(b.y - a.y, b.x - a.x), n = <span class="built_in">atan2</span>(c.y - a.y, c.x - a.x);</span><br><span class="line">        u.s = a;</span><br><span class="line">        u.e = u.s + <span class="built_in">Point</span>(<span class="built_in">cos</span>((n + m) / <span class="number">2</span>), <span class="built_in">sin</span>((n + m) / <span class="number">2</span>));</span><br><span class="line">        v.s = b;</span><br><span class="line">        m = <span class="built_in">atan2</span>(a.y - b.y, a.x - b.x), n = <span class="built_in">atan2</span>(c.y - b.y, c.x - b.x);</span><br><span class="line">        v.e = v.s + <span class="built_in">Point</span>(<span class="built_in">cos</span>((n + m) / <span class="number">2</span>), <span class="built_in">sin</span>((n + m) / <span class="number">2</span>));</span><br><span class="line">        p = u.<span class="built_in">crosspoint</span>(v);</span><br><span class="line">        r = <span class="built_in">Line</span>(a, b).<span class="built_in">dispointtoseg</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输入</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        p.<span class="built_in">input</span>();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.2lf %.2lf %.2lf\n&quot;</span>, p.x, p.y, r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>==(circle v)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in"><span class="keyword">return</span></span> (p == v.p) &amp;&amp; <span class="built_in">sgn</span>(r - v.r) == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(circle v) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ((p &lt; v.p) || ((p == v.p) &amp;&amp; <span class="built_in">sgn</span>(r - v.r) &lt; <span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//面积</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">area</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pi * r * r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//周长</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">circumference</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * pi * r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//`点和圆的关系`</span></span><br><span class="line">    <span class="comment">//`0 圆外`</span></span><br><span class="line">    <span class="comment">//`1 圆上`</span></span><br><span class="line">    <span class="comment">//`2 圆内`</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">relation</span><span class="params">(Point b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> dst = b.<span class="built_in">distance</span>(p);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">sgn</span>(dst - r) &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">sgn</span>(dst - r) == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//`线段和圆的关系`</span></span><br><span class="line">    <span class="comment">//`比较的是圆心到线段的距离和半径的关系`</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">relationseg</span><span class="params">(Line v)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> dst = v.<span class="built_in">dispointtoseg</span>(p);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">sgn</span>(dst - r) &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">sgn</span>(dst - r) == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//`直线和圆的关系`</span></span><br><span class="line">    <span class="comment">//`比较的是圆心到直线的距离和半径的关系`</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">relationline</span><span class="params">(Line v)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> dst = v.<span class="built_in">dispointtoline</span>(p);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">sgn</span>(dst - r) &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">sgn</span>(dst - r) == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//`两圆的关系`</span></span><br><span class="line">    <span class="comment">//`5 相离`</span></span><br><span class="line">    <span class="comment">//`4 外切`</span></span><br><span class="line">    <span class="comment">//`3 相交`</span></span><br><span class="line">    <span class="comment">//`2 内切`</span></span><br><span class="line">    <span class="comment">//`1 内含`</span></span><br><span class="line">    <span class="comment">//`需要Point的distance`</span></span><br><span class="line">    <span class="comment">//`测试：UVA12304`</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">relationcircle</span><span class="params">(circle v)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> d = p.<span class="built_in">distance</span>(v.p);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">sgn</span>(d - r - v.r) &gt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">sgn</span>(d - r - v.r) == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">double</span> l = <span class="built_in">fabs</span>(r - v.r);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">sgn</span>(d - r - v.r) &lt; <span class="number">0</span> &amp;&amp; <span class="built_in">sgn</span>(d - l) &gt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">sgn</span>(d - l) == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">sgn</span>(d - l) &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//`求两个圆的交点，返回0表示没有交点，返回1是一个交点，2是两个交点`</span></span><br><span class="line">    <span class="comment">//`需要relationcircle`</span></span><br><span class="line">    <span class="comment">//`测试：UVA12304`</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pointcrosscircle</span><span class="params">(circle v, Point &amp;p1, Point &amp;p2)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> rel = <span class="built_in">relationcircle</span>(v);</span><br><span class="line">        <span class="keyword">if</span> (rel == <span class="number">1</span> || rel == <span class="number">5</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">double</span> d = p.<span class="built_in">distance</span>(v.p);</span><br><span class="line">        <span class="keyword">double</span> l = (d * d + r * r - v.r * v.r) / (<span class="number">2</span> * d);</span><br><span class="line">        <span class="keyword">double</span> h = <span class="built_in">sqrt</span>(r * r - l * l);</span><br><span class="line">        Point tmp = p + (v.p - p).<span class="built_in">trunc</span>(l);</span><br><span class="line">        p1 = tmp + ((v.p - p).<span class="built_in">rotleft</span>().<span class="built_in">trunc</span>(h));</span><br><span class="line">        p2 = tmp + ((v.p - p).<span class="built_in">rotright</span>().<span class="built_in">trunc</span>(h));</span><br><span class="line">        <span class="keyword">if</span> (rel == <span class="number">2</span> || rel == <span class="number">4</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//`求直线和圆的交点，返回交点个数`</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pointcrossline</span><span class="params">(Line v, Point &amp;p1, Point &amp;p2)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!(*<span class="keyword">this</span>).<span class="built_in">relationline</span>(v))</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        Point a = v.<span class="built_in">lineprog</span>(p);</span><br><span class="line">        <span class="keyword">double</span> d = v.<span class="built_in">dispointtoline</span>(p);</span><br><span class="line">        d = <span class="built_in">sqrt</span>(r * r - d * d);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">sgn</span>(d) == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            p1 = a;</span><br><span class="line">            p2 = a;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        p1 = a + (v.e - v.s).<span class="built_in">trunc</span>(d);</span><br><span class="line">        p2 = a - (v.e - v.s).<span class="built_in">trunc</span>(d);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//`得到过a,b两点，半径为r1的两个圆`</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">gercircle</span><span class="params">(Point a, Point b, <span class="keyword">double</span> r1, circle &amp;c1, circle &amp;c2)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="function">circle <span class="title">x</span><span class="params">(a, r1)</span>, <span class="title">y</span><span class="params">(b, r1)</span></span>;</span><br><span class="line">        <span class="keyword">int</span> t = x.<span class="built_in">pointcrosscircle</span>(y, c1.p, c2.p);</span><br><span class="line">        <span class="keyword">if</span> (!t)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        c1.r = c2.r = r;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//`得到与直线u相切，过点q,半径为r1的圆`</span></span><br><span class="line">    <span class="comment">//`测试：UVA12304`</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getcircle</span><span class="params">(Line u, Point q, <span class="keyword">double</span> r1, circle &amp;c1, circle &amp;c2)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> dis = u.<span class="built_in">dispointtoline</span>(q);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">sgn</span>(dis - r1 * <span class="number">2</span>) &gt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">sgn</span>(dis) == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            c1.p = q + ((u.e - u.s).<span class="built_in">rotleft</span>().<span class="built_in">trunc</span>(r1));</span><br><span class="line">            c2.p = q + ((u.e - u.s).<span class="built_in">rotright</span>().<span class="built_in">trunc</span>(r1));</span><br><span class="line">            c1.r = c2.r = r1;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Line u1 = <span class="built_in">Line</span>((u.s + (u.e - u.s).<span class="built_in">rotleft</span>().<span class="built_in">trunc</span>(r1)), (u.e + (u.e - u.s).<span class="built_in">rotleft</span>().<span class="built_in">trunc</span>(r1)));</span><br><span class="line">        Line u2 = <span class="built_in">Line</span>((u.s + (u.e - u.s).<span class="built_in">rotright</span>().<span class="built_in">trunc</span>(r1)), (u.e + (u.e - u.s).<span class="built_in">rotright</span>().<span class="built_in">trunc</span>(r1)));</span><br><span class="line">        circle cc = <span class="built_in">circle</span>(q, r1);</span><br><span class="line">        Point p1, p2;</span><br><span class="line">        <span class="keyword">if</span> (!cc.<span class="built_in">pointcrossline</span>(u1, p1, p2))</span><br><span class="line">            cc.<span class="built_in">pointcrossline</span>(u2, p1, p2);</span><br><span class="line">        c1 = <span class="built_in">circle</span>(p1, r1);</span><br><span class="line">        <span class="keyword">if</span> (p1 == p2)</span><br><span class="line">        &#123;</span><br><span class="line">            c2 = c1;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        c2 = <span class="built_in">circle</span>(p2, r1);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//`同时与直线u,v相切，半径为r1的圆`</span></span><br><span class="line">    <span class="comment">//`测试：UVA12304`</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getcircle</span><span class="params">(Line u, Line v, <span class="keyword">double</span> r1, circle &amp;c1, circle &amp;c2, circle &amp;c3, circle &amp;c4)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (u.<span class="built_in">parallel</span>(v))</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//两直线平行</span></span><br><span class="line">        Line u1 = <span class="built_in">Line</span>(u.s + (u.e - u.s).<span class="built_in">rotleft</span>().<span class="built_in">trunc</span>(r1), u.e + (u.e - u.s).<span class="built_in">rotleft</span>().<span class="built_in">trunc</span>(r1));</span><br><span class="line">        Line u2 = <span class="built_in">Line</span>(u.s + (u.e - u.s).<span class="built_in">rotright</span>().<span class="built_in">trunc</span>(r1), u.e + (u.e - u.s).<span class="built_in">rotright</span>().<span class="built_in">trunc</span>(r1));</span><br><span class="line">        Line v1 = <span class="built_in">Line</span>(v.s + (v.e - v.s).<span class="built_in">rotleft</span>().<span class="built_in">trunc</span>(r1), v.e + (v.e - v.s).<span class="built_in">rotleft</span>().<span class="built_in">trunc</span>(r1));</span><br><span class="line">        Line v2 = <span class="built_in">Line</span>(v.s + (v.e - v.s).<span class="built_in">rotright</span>().<span class="built_in">trunc</span>(r1), v.e + (v.e - v.s).<span class="built_in">rotright</span>().<span class="built_in">trunc</span>(r1));</span><br><span class="line">        c1.r = c2.r = c3.r = c4.r = r1;</span><br><span class="line">        c1.p = u1.<span class="built_in">crosspoint</span>(v1);</span><br><span class="line">        c2.p = u1.<span class="built_in">crosspoint</span>(v2);</span><br><span class="line">        c3.p = u2.<span class="built_in">crosspoint</span>(v1);</span><br><span class="line">        c4.p = u2.<span class="built_in">crosspoint</span>(v2);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//`同时与不相交圆cx,cy相切，半径为r1的圆`</span></span><br><span class="line">    <span class="comment">//`测试：UVA12304`</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getcircle</span><span class="params">(circle cx, circle cy, <span class="keyword">double</span> r1, circle &amp;c1, circle &amp;c2)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="function">circle <span class="title">x</span><span class="params">(cx.p, r1 + cx.r)</span>, <span class="title">y</span><span class="params">(cy.p, r1 + cy.r)</span></span>;</span><br><span class="line">        <span class="keyword">int</span> t = x.<span class="built_in">pointcrosscircle</span>(y, c1.p, c2.p);</span><br><span class="line">        <span class="keyword">if</span> (!t)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        c1.r = c2.r = r1;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//`过一点作圆的切线(先判断点和圆的关系)`</span></span><br><span class="line">    <span class="comment">//`测试：UVA12304`</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">tangentline</span><span class="params">(Point q, Line &amp;u, Line &amp;v)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="built_in">relation</span>(q);</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            u = <span class="built_in">Line</span>(q, q + (q - p).<span class="built_in">rotleft</span>());</span><br><span class="line">            v = u;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span> d = p.<span class="built_in">distance</span>(q);</span><br><span class="line">        <span class="keyword">double</span> l = r * r / d;</span><br><span class="line">        <span class="keyword">double</span> h = <span class="built_in">sqrt</span>(r * r - l * l);</span><br><span class="line">        u = <span class="built_in">Line</span>(q, p + ((q - p).<span class="built_in">trunc</span>(l) + (q - p).<span class="built_in">rotleft</span>().<span class="built_in">trunc</span>(h)));</span><br><span class="line">        v = <span class="built_in">Line</span>(q, p + ((q - p).<span class="built_in">trunc</span>(l) + (q - p).<span class="built_in">rotright</span>().<span class="built_in">trunc</span>(h)));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//`求两圆相交的面积`</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">areacircle</span><span class="params">(circle v)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> rel = <span class="built_in">relationcircle</span>(v);</span><br><span class="line">        <span class="keyword">if</span> (rel &gt;= <span class="number">4</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">if</span> (rel &lt;= <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">min</span>(<span class="built_in">area</span>(), v.<span class="built_in">area</span>());</span><br><span class="line">        <span class="keyword">double</span> d = p.<span class="built_in">distance</span>(v.p);</span><br><span class="line">        <span class="keyword">double</span> hf = (r + v.r + d) / <span class="number">2.0</span>;</span><br><span class="line">        <span class="keyword">double</span> ss = <span class="number">2</span> * <span class="built_in">sqrt</span>(hf * (hf - r) * (hf - v.r) * (hf - d));</span><br><span class="line">        <span class="keyword">double</span> a1 = <span class="built_in">acos</span>((r * r + d * d - v.r * v.r) / (<span class="number">2.0</span> * r * d));</span><br><span class="line">        a1 = a1 * r * r;</span><br><span class="line">        <span class="keyword">double</span> a2 = <span class="built_in">acos</span>((v.r * v.r + d * d - r * r) / (<span class="number">2.0</span> * v.r * d));</span><br><span class="line">        a2 = a2 * v.r * v.r;</span><br><span class="line">        <span class="keyword">return</span> a1 + a2 - ss;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//`求圆和三角形pab的相交面积`</span></span><br><span class="line">    <span class="comment">//`测试：POJ3675 HDU3982 HDU2892`</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">areatriangle</span><span class="params">(Point a, Point b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">sgn</span>((p - a) ^ (p - b)) == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line">        Point q[<span class="number">5</span>];</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        q[len++] = a;</span><br><span class="line">        <span class="function">Line <span class="title">l</span><span class="params">(a, b)</span></span>;</span><br><span class="line">        Point p1, p2;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">pointcrossline</span>(l, q[<span class="number">1</span>], q[<span class="number">2</span>]) == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">sgn</span>((a - q[<span class="number">1</span>]) * (b - q[<span class="number">1</span>])) &lt; <span class="number">0</span>)</span><br><span class="line">                q[len++] = q[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">sgn</span>((a - q[<span class="number">2</span>]) * (b - q[<span class="number">2</span>])) &lt; <span class="number">0</span>)</span><br><span class="line">                q[len++] = q[<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        q[len++] = b;</span><br><span class="line">        <span class="keyword">if</span> (len == <span class="number">4</span> &amp;&amp; <span class="built_in">sgn</span>((q[<span class="number">0</span>] - q[<span class="number">1</span>]) * (q[<span class="number">2</span>] - q[<span class="number">1</span>])) &gt; <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">swap</span>(q[<span class="number">1</span>], q[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">double</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">relation</span>(q[i]) == <span class="number">0</span> || <span class="built_in">relation</span>(q[i + <span class="number">1</span>]) == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">double</span> arg = p.<span class="built_in">rad</span>(q[i], q[i + <span class="number">1</span>]);</span><br><span class="line">                res += r * r * arg / <span class="number">2.0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                res += <span class="built_in">fabs</span>((q[i] - p) ^ (q[i + <span class="number">1</span>] - p)) / <span class="number">2.0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * n,p  Line l for each side</span></span><br><span class="line"><span class="comment"> * input(int _n)                        - inputs _n size polygon</span></span><br><span class="line"><span class="comment"> * add(Point q)                         - adds a point at end of the list</span></span><br><span class="line"><span class="comment"> * getline()                            - populates line array</span></span><br><span class="line"><span class="comment"> * cmp                                  - comparision in convex_hull order</span></span><br><span class="line"><span class="comment"> * norm()                               - sorting in convex_hull order</span></span><br><span class="line"><span class="comment"> * getconvex(polygon &amp;convex)           - returns convex hull in convex</span></span><br><span class="line"><span class="comment"> * Graham(polygon &amp;convex)              - returns convex hull in convex</span></span><br><span class="line"><span class="comment"> * isconvex()                           - checks if convex</span></span><br><span class="line"><span class="comment"> * relationpoint(Point q)               - returns 3 if q is a vertex</span></span><br><span class="line"><span class="comment"> *                                                2 if on a side</span></span><br><span class="line"><span class="comment"> *                                                1 if inside</span></span><br><span class="line"><span class="comment"> *                                                0 if outside</span></span><br><span class="line"><span class="comment"> * convexcut(Line u,polygon &amp;po)        - left side of u in po</span></span><br><span class="line"><span class="comment"> * gercircumference()                   - returns side length</span></span><br><span class="line"><span class="comment"> * getarea()                            - returns area</span></span><br><span class="line"><span class="comment"> * getdir()                             - returns 0 for cw, 1 for ccw</span></span><br><span class="line"><span class="comment"> * getbarycentre()                      - returns barycenter</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">polygon</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    Point p[maxp];</span><br><span class="line">    Line l[maxp];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">(<span class="keyword">int</span> _n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        n = _n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            p[i].<span class="built_in">input</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(Point q)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        p[n++] = q;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getline</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            l[i] = <span class="built_in">Line</span>(p[i], p[(i + <span class="number">1</span>) % n]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">cmp</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        Point p;</span><br><span class="line">        <span class="built_in">cmp</span>(<span class="keyword">const</span> Point &amp;p0) &#123; p = p0; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> Point &amp;aa, <span class="keyword">const</span> Point &amp;bb)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            Point a = aa, b = bb;</span><br><span class="line">            <span class="keyword">int</span> d = <span class="built_in">sgn</span>((a - p) ^ (b - p));</span><br><span class="line">            <span class="keyword">if</span> (d == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">sgn</span>(a.<span class="built_in">distance</span>(p) - b.<span class="built_in">distance</span>(p)) &lt; <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> d &gt; <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//`进行极角排序`</span></span><br><span class="line">    <span class="comment">//`首先需要找到最左下角的点`</span></span><br><span class="line">    <span class="comment">//`需要重载号好Point的 &lt; 操作符(min函数要用) `</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">norm</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Point mi = p[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">            mi = <span class="built_in">min</span>(mi, p[i]);</span><br><span class="line">        <span class="built_in">sort</span>(p, p + n, <span class="built_in">cmp</span>(mi));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//`得到凸包`</span></span><br><span class="line">    <span class="comment">//`得到的凸包里面的点编号是0$\sim$n-1的`</span></span><br><span class="line">    <span class="comment">//`两种凸包的方法`</span></span><br><span class="line">    <span class="comment">//`注意如果有影响，要特判下所有点共点，或者共线的特殊情况`</span></span><br><span class="line">    <span class="comment">//`测试 LightOJ1203  LightOJ1239`</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getconvex</span><span class="params">(polygon &amp;convex)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(p, p + n);</span><br><span class="line">        convex.n = n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">min</span>(n, <span class="number">2</span>); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            convex.p[i] = p[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (convex.n == <span class="number">2</span> &amp;&amp; (convex.p[<span class="number">0</span>] == convex.p[<span class="number">1</span>]))</span><br><span class="line">            convex.n--; <span class="comment">//特判</span></span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> &amp;top = convex.n;</span><br><span class="line">        top = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (top &amp;&amp; <span class="built_in">sgn</span>((convex.p[top] - p[i]) ^ (convex.p[top - <span class="number">1</span>] - p[i])) &lt;= <span class="number">0</span>)</span><br><span class="line">                top--;</span><br><span class="line">            convex.p[++top] = p[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> temp = top;</span><br><span class="line">        convex.p[++top] = p[n - <span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">3</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (top != temp &amp;&amp; <span class="built_in">sgn</span>((convex.p[top] - p[i]) ^ (convex.p[top - <span class="number">1</span>] - p[i])) &lt;= <span class="number">0</span>)</span><br><span class="line">                top--;</span><br><span class="line">            convex.p[++top] = p[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (convex.n == <span class="number">2</span> &amp;&amp; (convex.p[<span class="number">0</span>] == convex.p[<span class="number">1</span>]))</span><br><span class="line">            convex.n--; <span class="comment">//特判</span></span><br><span class="line">        convex.<span class="built_in">norm</span>();  <span class="comment">//`原来得到的是顺时针的点，排序后逆时针`</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//`得到凸包的另外一种方法`</span></span><br><span class="line">    <span class="comment">//`测试 LightOJ1203  LightOJ1239`</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Graham</span><span class="params">(polygon &amp;convex)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">norm</span>();</span><br><span class="line">        <span class="keyword">int</span> &amp;top = convex.n;</span><br><span class="line">        top = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            top = <span class="number">1</span>;</span><br><span class="line">            convex.p[<span class="number">0</span>] = p[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            top = <span class="number">2</span>;</span><br><span class="line">            convex.p[<span class="number">0</span>] = p[<span class="number">0</span>];</span><br><span class="line">            convex.p[<span class="number">1</span>] = p[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (convex.p[<span class="number">0</span>] == convex.p[<span class="number">1</span>])</span><br><span class="line">                top--;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        convex.p[<span class="number">0</span>] = p[<span class="number">0</span>];</span><br><span class="line">        convex.p[<span class="number">1</span>] = p[<span class="number">1</span>];</span><br><span class="line">        top = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (top &gt; <span class="number">1</span> &amp;&amp; <span class="built_in">sgn</span>((convex.p[top - <span class="number">1</span>] - convex.p[top - <span class="number">2</span>]) ^ (p[i] - convex.p[top - <span class="number">2</span>])) &lt;= <span class="number">0</span>)</span><br><span class="line">                top--;</span><br><span class="line">            convex.p[top++] = p[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (convex.n == <span class="number">2</span> &amp;&amp; (convex.p[<span class="number">0</span>] == convex.p[<span class="number">1</span>]))</span><br><span class="line">            convex.n--; <span class="comment">//特判</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//`判断是不是凸的`</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isconvex</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">bool</span> s[<span class="number">2</span>];</span><br><span class="line">        <span class="built_in">memset</span>(s, <span class="literal">false</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(s));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> j = (i + <span class="number">1</span>) % n;</span><br><span class="line">            <span class="keyword">int</span> k = (j + <span class="number">1</span>) % n;</span><br><span class="line">            s[<span class="built_in">sgn</span>((p[j] - p[i]) ^ (p[k] - p[i])) + <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (s[<span class="number">0</span>] &amp;&amp; s[<span class="number">2</span>])</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//`判断点和任意多边形的关系`</span></span><br><span class="line">    <span class="comment">//` 3 点上`</span></span><br><span class="line">    <span class="comment">//` 2 边上`</span></span><br><span class="line">    <span class="comment">//` 1 内部`</span></span><br><span class="line">    <span class="comment">//` 0 外部`</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">relationpoint</span><span class="params">(Point q)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (p[i] == q)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">getline</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (l[i].<span class="built_in">pointonseg</span>(q))</span><br><span class="line">                <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> j = (i + <span class="number">1</span>) % n;</span><br><span class="line">            <span class="keyword">int</span> k = <span class="built_in">sgn</span>((q - p[j]) ^ (p[i] - p[j]));</span><br><span class="line">            <span class="keyword">int</span> u = <span class="built_in">sgn</span>(p[i].y - q.y);</span><br><span class="line">            <span class="keyword">int</span> v = <span class="built_in">sgn</span>(p[j].y - q.y);</span><br><span class="line">            <span class="keyword">if</span> (k &gt; <span class="number">0</span> &amp;&amp; u &lt; <span class="number">0</span> &amp;&amp; v &gt;= <span class="number">0</span>)</span><br><span class="line">                cnt++;</span><br><span class="line">            <span class="keyword">if</span> (k &lt; <span class="number">0</span> &amp;&amp; v &lt; <span class="number">0</span> &amp;&amp; u &gt;= <span class="number">0</span>)</span><br><span class="line">                cnt--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt != <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//`直线u切割凸多边形左侧`</span></span><br><span class="line">    <span class="comment">//`注意直线方向`</span></span><br><span class="line">    <span class="comment">//`测试：HDU3982`</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">convexcut</span><span class="params">(Line u, polygon &amp;po)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> &amp;top = po.n; <span class="comment">//注意引用</span></span><br><span class="line">        top = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> d1 = <span class="built_in">sgn</span>((u.e - u.s) ^ (p[i] - u.s));</span><br><span class="line">            <span class="keyword">int</span> d2 = <span class="built_in">sgn</span>((u.e - u.s) ^ (p[(i + <span class="number">1</span>) % n] - u.s));</span><br><span class="line">            <span class="keyword">if</span> (d1 &gt;= <span class="number">0</span>)</span><br><span class="line">                po.p[top++] = p[i];</span><br><span class="line">            <span class="keyword">if</span> (d1 * d2 &lt; <span class="number">0</span>)</span><br><span class="line">                po.p[top++] = u.<span class="built_in">crosspoint</span>(<span class="built_in">Line</span>(p[i], p[(i + <span class="number">1</span>) % n]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//`得到周长`</span></span><br><span class="line">    <span class="comment">//`测试 LightOJ1239`</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getcircumference</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            sum += p[i].<span class="built_in">distance</span>(p[(i + <span class="number">1</span>) % n]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//`得到面积`</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getarea</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            sum += (p[i] ^ p[(i + <span class="number">1</span>) % n]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">fabs</span>(sum) / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//`得到方向`</span></span><br><span class="line">    <span class="comment">//` 1 表示逆时针，0表示顺时针`</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">getdir</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            sum += (p[i] ^ p[(i + <span class="number">1</span>) % n]);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">sgn</span>(sum) &gt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//`得到重心`</span></span><br><span class="line">    <span class="function">Point <span class="title">getbarycentre</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="function">Point <span class="title">ret</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">double</span> area = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n - <span class="number">1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">double</span> tmp = (p[i] - p[<span class="number">0</span>]) ^ (p[i + <span class="number">1</span>] - p[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">sgn</span>(tmp) == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            area += tmp;</span><br><span class="line">            ret.x += (p[<span class="number">0</span>].x + p[i].x + p[i + <span class="number">1</span>].x) / <span class="number">3</span> * tmp;</span><br><span class="line">            ret.y += (p[<span class="number">0</span>].y + p[i].y + p[i + <span class="number">1</span>].y) / <span class="number">3</span> * tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">sgn</span>(area))</span><br><span class="line">            ret = ret / area;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//`多边形和圆交的面积`</span></span><br><span class="line">    <span class="comment">//`测试：POJ3675 HDU3982 HDU2892`</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">areacircle</span><span class="params">(circle c)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> j = (i + <span class="number">1</span>) % n;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">sgn</span>((p[j] - c.p) ^ (p[i] - c.p)) &gt;= <span class="number">0</span>)</span><br><span class="line">                ans += c.<span class="built_in">areatriangle</span>(p[i], p[j]);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                ans -= c.<span class="built_in">areatriangle</span>(p[i], p[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">fabs</span>(ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//`多边形和圆关系`</span></span><br><span class="line">    <span class="comment">//` 2 圆完全在多边形内`</span></span><br><span class="line">    <span class="comment">//` 1 圆在多边形里面，碰到了多边形边界`</span></span><br><span class="line">    <span class="comment">//` 0 其它`</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">relationcircle</span><span class="params">(circle c)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">getline</span>();</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">relationpoint</span>(c.p) != <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//圆心不在内部</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (c.<span class="built_in">relationseg</span>(l[i]) == <span class="number">2</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (c.<span class="built_in">relationseg</span>(l[i]) == <span class="number">1</span>)</span><br><span class="line">                x = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//`AB X AC`</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">cross</span><span class="params">(Point A, Point B, Point C)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (B - A) ^ (C - A);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//`AB*AC`</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dot</span><span class="params">(Point A, Point B, Point C)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (B - A) * (C - A);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//`最小矩形面积覆盖`</span></span><br><span class="line"><span class="comment">//` A 必须是凸包(而且是逆时针顺序)`</span></span><br><span class="line"><span class="comment">//` 测试 UVA 10173`</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">minRectangleCover</span><span class="params">(polygon A)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//`要特判A.n &lt; 3的情况`</span></span><br><span class="line">    <span class="keyword">if</span> (A.n &lt; <span class="number">3</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line">    A.p[A.n] = A.p[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">double</span> ans = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> r = <span class="number">1</span>, p = <span class="number">1</span>, q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A.n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//`卡出离边A.p[i] - A.p[i+1]最远的点`</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">sgn</span>(<span class="built_in">cross</span>(A.p[i], A.p[i + <span class="number">1</span>], A.p[r + <span class="number">1</span>]) - <span class="built_in">cross</span>(A.p[i], A.p[i + <span class="number">1</span>], A.p[r])) &gt;= <span class="number">0</span>)</span><br><span class="line">            r = (r + <span class="number">1</span>) % A.n;</span><br><span class="line">        <span class="comment">//`卡出A.p[i] - A.p[i+1]方向上正向n最远的点`</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">sgn</span>(<span class="built_in">dot</span>(A.p[i], A.p[i + <span class="number">1</span>], A.p[p + <span class="number">1</span>]) - <span class="built_in">dot</span>(A.p[i], A.p[i + <span class="number">1</span>], A.p[p])) &gt;= <span class="number">0</span>)</span><br><span class="line">            p = (p + <span class="number">1</span>) % A.n;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">            q = p;</span><br><span class="line">        <span class="comment">//`卡出A.p[i] - A.p[i+1]方向上负向最远的点`</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">sgn</span>(<span class="built_in">dot</span>(A.p[i], A.p[i + <span class="number">1</span>], A.p[q + <span class="number">1</span>]) - <span class="built_in">dot</span>(A.p[i], A.p[i + <span class="number">1</span>], A.p[q])) &lt;= <span class="number">0</span>)</span><br><span class="line">            q = (q + <span class="number">1</span>) % A.n;</span><br><span class="line">        <span class="keyword">double</span> d = (A.p[i] - A.p[i + <span class="number">1</span>]).<span class="built_in">len2</span>();</span><br><span class="line">        <span class="keyword">double</span> tmp = <span class="built_in">cross</span>(A.p[i], A.p[i + <span class="number">1</span>], A.p[r]) *</span><br><span class="line">                     (<span class="built_in">dot</span>(A.p[i], A.p[i + <span class="number">1</span>], A.p[p]) - <span class="built_in">dot</span>(A.p[i], A.p[i + <span class="number">1</span>], A.p[q])) / d;</span><br><span class="line">        <span class="keyword">if</span> (ans &lt; <span class="number">0</span> || ans &gt; tmp)</span><br><span class="line">            ans = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//`直线切凸多边形`</span></span><br><span class="line"><span class="comment">//`多边形是逆时针的，在q1q2的左侧`</span></span><br><span class="line"><span class="comment">//`测试:HDU3982`</span></span><br><span class="line"><span class="function">vector&lt;Point&gt; <span class="title">convexCut</span><span class="params">(<span class="keyword">const</span> vector&lt;Point&gt; &amp;ps, Point q1, Point q2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;Point&gt; qs;</span><br><span class="line">    <span class="keyword">int</span> n = ps.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Point p1 = ps[i], p2 = ps[(i + <span class="number">1</span>) % n];</span><br><span class="line">        <span class="keyword">int</span> d1 = <span class="built_in">sgn</span>((q2 - q1) ^ (p1 - q1)), d2 = <span class="built_in">sgn</span>((q2 - q1) ^ (p2 - q1));</span><br><span class="line">        <span class="keyword">if</span> (d1 &gt;= <span class="number">0</span>)</span><br><span class="line">            qs.<span class="built_in">push_back</span>(p1);</span><br><span class="line">        <span class="keyword">if</span> (d1 * d2 &lt; <span class="number">0</span>)</span><br><span class="line">            qs.<span class="built_in">push_back</span>(<span class="built_in">Line</span>(p1, p2).<span class="built_in">crosspoint</span>(<span class="built_in">Line</span>(q1, q2)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> qs;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//`半平面交`</span></span><br><span class="line"><span class="comment">//`测试 POJ3335 POJ1474 POJ1279`</span></span><br><span class="line"><span class="comment">//***************************</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">halfplane</span> :</span> <span class="keyword">public</span> Line</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">double</span> angle;</span><br><span class="line">    <span class="built_in">halfplane</span>() &#123;&#125;</span><br><span class="line">    <span class="comment">//`表示向量s-&gt;e逆时针(左侧)的半平面`</span></span><br><span class="line">    <span class="built_in">halfplane</span>(Point _s, Point _e)</span><br><span class="line">    &#123;</span><br><span class="line">        s = _s;</span><br><span class="line">        e = _e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">halfplane</span>(Line v)</span><br><span class="line">    &#123;</span><br><span class="line">        s = v.s;</span><br><span class="line">        e = v.e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">calcangle</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        angle = <span class="built_in">atan2</span>(e.y - s.y, e.x - s.x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> halfplane &amp;b) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> angle &lt; b.angle;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">halfplanes</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    halfplane hp[maxp];</span><br><span class="line">    Point p[maxp];</span><br><span class="line">    <span class="keyword">int</span> que[maxp];</span><br><span class="line">    <span class="keyword">int</span> st, ed;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(halfplane tmp)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        hp[n++] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//去重</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unique</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">sgn</span>(hp[i].angle - hp[i - <span class="number">1</span>].angle) != <span class="number">0</span>)</span><br><span class="line">                hp[m++] = hp[i];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">sgn</span>((hp[m - <span class="number">1</span>].e - hp[m - <span class="number">1</span>].s) ^ (hp[i].s - hp[m - <span class="number">1</span>].s)) &gt; <span class="number">0</span>)</span><br><span class="line">                hp[m - <span class="number">1</span>] = hp[i];</span><br><span class="line">        &#125;</span><br><span class="line">        n = m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">halfplaneinsert</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            hp[i].<span class="built_in">calcangle</span>();</span><br><span class="line">        <span class="built_in">sort</span>(hp, hp + n);</span><br><span class="line">        <span class="built_in">unique</span>();</span><br><span class="line">        que[st = <span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        que[ed = <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        p[<span class="number">1</span>] = hp[<span class="number">0</span>].<span class="built_in">crosspoint</span>(hp[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (st &lt; ed &amp;&amp; <span class="built_in">sgn</span>((hp[i].e - hp[i].s) ^ (p[ed] - hp[i].s)) &lt; <span class="number">0</span>)</span><br><span class="line">                ed--;</span><br><span class="line">            <span class="keyword">while</span> (st &lt; ed &amp;&amp; <span class="built_in">sgn</span>((hp[i].e - hp[i].s) ^ (p[st + <span class="number">1</span>] - hp[i].s)) &lt; <span class="number">0</span>)</span><br><span class="line">                st++;</span><br><span class="line">            que[++ed] = i;</span><br><span class="line">            <span class="keyword">if</span> (hp[i].<span class="built_in">parallel</span>(hp[que[ed - <span class="number">1</span>]]))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            p[ed] = hp[i].<span class="built_in">crosspoint</span>(hp[que[ed - <span class="number">1</span>]]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (st &lt; ed &amp;&amp; <span class="built_in">sgn</span>((hp[que[st]].e - hp[que[st]].s) ^ (p[ed] - hp[que[st]].s)) &lt; <span class="number">0</span>)</span><br><span class="line">            ed--;</span><br><span class="line">        <span class="keyword">while</span> (st &lt; ed &amp;&amp; <span class="built_in">sgn</span>((hp[que[ed]].e - hp[que[ed]].s) ^ (p[st + <span class="number">1</span>] - hp[que[ed]].s)) &lt; <span class="number">0</span>)</span><br><span class="line">            st++;</span><br><span class="line">        <span class="keyword">if</span> (st + <span class="number">1</span> &gt;= ed)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//`得到最后半平面交得到的凸多边形`</span></span><br><span class="line">    <span class="comment">//`需要先调用halfplaneinsert() 且返回true`</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getconvex</span><span class="params">(polygon &amp;con)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        p[st] = hp[que[st]].<span class="built_in">crosspoint</span>(hp[que[ed]]);</span><br><span class="line">        con.n = ed - st + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = st, i = <span class="number">0</span>; j &lt;= ed; i++, j++)</span><br><span class="line">            con.p[i] = p[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//***************************</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1010</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">circles</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    circle c[maxn];</span><br><span class="line">    <span class="keyword">double</span> ans[maxn]; <span class="comment">//`ans[i]表示被覆盖了i次的面积`</span></span><br><span class="line">    <span class="keyword">double</span> pre[maxn];</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">circles</span>() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(circle cc)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        c[n++] = cc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//`x包含在y中`</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">inner</span><span class="params">(circle x, circle y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x.<span class="built_in">relationcircle</span>(y) != <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sgn</span>(x.r - y.r) &lt;= <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//圆的面积并去掉内含的圆</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init_or</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">bool</span> mark[maxn] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> i, j, k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">                <span class="keyword">if</span> (i != j &amp;&amp; !mark[j])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((c[i] == c[j]) || <span class="built_in">inner</span>(c[i], c[j]))</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">if</span> (j &lt; n)</span><br><span class="line">                mark[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            <span class="keyword">if</span> (!mark[i])</span><br><span class="line">                c[k++] = c[i];</span><br><span class="line">        n = k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//`圆的面积交去掉内含的圆`</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init_add</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i, j, k;</span><br><span class="line">        <span class="keyword">bool</span> mark[maxn] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">                <span class="keyword">if</span> (i != j &amp;&amp; !mark[j])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((c[i] == c[j]) || <span class="built_in">inner</span>(c[j], c[i]))</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">if</span> (j &lt; n)</span><br><span class="line">                mark[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            <span class="keyword">if</span> (!mark[i])</span><br><span class="line">                c[k++] = c[i];</span><br><span class="line">        n = k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//`半径为r的圆，弧度为th对应的弓形的面积`</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">areaarc</span><span class="params">(<span class="keyword">double</span> th, <span class="keyword">double</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.5</span> * r * r * (th - <span class="built_in">sin</span>(th));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//`测试SPOJVCIRCLES SPOJCIRUT`</span></span><br><span class="line">    <span class="comment">//`SPOJVCIRCLES求n个圆并的面积，需要加上init\_or()去掉重复圆（否则WA）`</span></span><br><span class="line">    <span class="comment">//`SPOJCIRUT 是求被覆盖k次的面积，不能加init\_or()`</span></span><br><span class="line">    <span class="comment">//`对于求覆盖多少次面积的问题，不能解决相同圆，而且不能init\_or()`</span></span><br><span class="line">    <span class="comment">//`求多圆面积并，需要init\_or,其中一个目的就是去掉相同圆`</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getarea</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(ans, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(ans));</span><br><span class="line">        vector&lt;pair&lt;<span class="keyword">double</span>, <span class="keyword">int</span>&gt;&gt; v;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            v.<span class="built_in">clear</span>();</span><br><span class="line">            v.<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(-pi, <span class="number">1</span>));</span><br><span class="line">            v.<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(pi, <span class="number">-1</span>));</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">                <span class="keyword">if</span> (i != j)</span><br><span class="line">                &#123;</span><br><span class="line">                    Point q = (c[j].p - c[i].p);</span><br><span class="line">                    <span class="keyword">double</span> ab = q.<span class="built_in">len</span>(), ac = c[i].r, bc = c[j].r;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">sgn</span>(ab + ac - bc) &lt;= <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        v.<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(-pi, <span class="number">1</span>));</span><br><span class="line">                        v.<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(pi, <span class="number">-1</span>));</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">sgn</span>(ab + bc - ac) &lt;= <span class="number">0</span>)</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">sgn</span>(ab - ac - bc) &gt; <span class="number">0</span>)</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">double</span> th = <span class="built_in">atan2</span>(q.y, q.x), fai = <span class="built_in">acos</span>((ac * ac + ab * ab - bc * bc) / (<span class="number">2.0</span> * ac * ab));</span><br><span class="line">                    <span class="keyword">double</span> a0 = th - fai;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">sgn</span>(a0 + pi) &lt; <span class="number">0</span>)</span><br><span class="line">                        a0 += <span class="number">2</span> * pi;</span><br><span class="line">                    <span class="keyword">double</span> a1 = th + fai;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">sgn</span>(a1 - pi) &gt; <span class="number">0</span>)</span><br><span class="line">                        a1 -= <span class="number">2</span> * pi;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">sgn</span>(a0 - a1) &gt; <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        v.<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(a0, <span class="number">1</span>));</span><br><span class="line">                        v.<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(pi, <span class="number">-1</span>));</span><br><span class="line">                        v.<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(-pi, <span class="number">1</span>));</span><br><span class="line">                        v.<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(a1, <span class="number">-1</span>));</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        v.<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(a0, <span class="number">1</span>));</span><br><span class="line">                        v.<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(a1, <span class="number">-1</span>));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">            <span class="keyword">int</span> cur = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; v.<span class="built_in">size</span>(); j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (cur &amp;&amp; <span class="built_in">sgn</span>(v[j].first - pre[cur]))</span><br><span class="line">                &#123;</span><br><span class="line">                    ans[cur] += <span class="built_in">areaarc</span>(v[j].first - pre[cur], c[i].r);</span><br><span class="line">                    ans[cur] += <span class="number">0.5</span> * (<span class="built_in">Point</span>(c[i].p.x + c[i].r * <span class="built_in">cos</span>(pre[cur]), c[i].p.y + c[i].r * <span class="built_in">sin</span>(pre[cur])) ^ <span class="built_in">Point</span>(c[i].p.x + c[i].r * <span class="built_in">cos</span>(v[j].first), c[i].p.y + c[i].r * <span class="built_in">sin</span>(v[j].first)));</span><br><span class="line">                &#125;</span><br><span class="line">                cur += v[j].second;</span><br><span class="line">                pre[cur] = v[j].first;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">            ans[i] -= ans[i + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="7-2-三维几何"><a href="#7-2-三维几何" class="headerlink" title="7.2 三维几何"></a>7.2 三维几何</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sgn</span><span class="params">(<span class="keyword">double</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">fabs</span>(x) &lt; eps)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point3</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x, y, z;</span><br><span class="line">    <span class="built_in">Point3</span>(<span class="keyword">double</span> _x = <span class="number">0</span>, <span class="keyword">double</span> _y = <span class="number">0</span>, <span class="keyword">double</span> _z = <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x = _x;</span><br><span class="line">        y = _y;</span><br><span class="line">        z = _z;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf%lf&quot;</span>, &amp;x, &amp;y, &amp;z);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%.2lf %.2lf %.2lf\n&quot;</span>, x, y, z);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> Point3 &amp;b) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sgn</span>(x - b.x) == <span class="number">0</span> &amp;&amp; <span class="built_in">sgn</span>(y - b.y) == <span class="number">0</span> &amp;&amp; <span class="built_in">sgn</span>(z - b.z) == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Point3 &amp;b) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sgn</span>(x - b.x) == <span class="number">0</span> ? (<span class="built_in">sgn</span>(y - b.y) == <span class="number">0</span> ? <span class="built_in">sgn</span>(z - b.z) &lt; <span class="number">0</span> : y &lt; b.y) : x &lt; b.x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">len</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sqrt</span>(x * x + y * y + z * z);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">len2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x * x + y * y + z * z;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">distance</span><span class="params">(<span class="keyword">const</span> Point3 &amp;b)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sqrt</span>((x - b.x) * (x - b.x) + (y - b.y) * (y - b.y) + (z - b.z) * (z - b.z));</span><br><span class="line">    &#125;</span><br><span class="line">    Point3 <span class="keyword">operator</span>-(<span class="keyword">const</span> Point3 &amp;b) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Point3</span>(x - b.x, y - b.y, z - b.z);</span><br><span class="line">    &#125;</span><br><span class="line">    Point3 <span class="keyword">operator</span>+(<span class="keyword">const</span> Point3 &amp;b) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Point3</span>(x + b.x, y + b.y, z + b.z);</span><br><span class="line">    &#125;</span><br><span class="line">    Point3 <span class="keyword">operator</span>*(<span class="keyword">const</span> <span class="keyword">double</span> &amp;k) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Point3</span>(x * k, y * k, z * k);</span><br><span class="line">    &#125;</span><br><span class="line">    Point3 <span class="keyword">operator</span>/(<span class="keyword">const</span> <span class="keyword">double</span> &amp;k) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Point3</span>(x / k, y / k, z / k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//点乘</span></span><br><span class="line">    <span class="keyword">double</span> <span class="keyword">operator</span>*(<span class="keyword">const</span> Point3 &amp;b) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> x * b.x + y * b.y + z * b.z;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//叉乘</span></span><br><span class="line">    Point3 <span class="keyword">operator</span>^(<span class="keyword">const</span> Point3 &amp;b) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Point3</span>(y * b.z - z * b.y, z * b.x - x * b.z, x * b.y - y * b.x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">rad</span><span class="params">(Point3 a, Point3 b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Point3 p = (*<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">acos</span>(((a - p) * (b - p)) / (a.<span class="built_in">distance</span>(p) * b.<span class="built_in">distance</span>(p)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//变换长度</span></span><br><span class="line">    <span class="function">Point3 <span class="title">trunc</span><span class="params">(<span class="keyword">double</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> l = <span class="built_in">len</span>();</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">sgn</span>(l))</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        r /= l;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Point3</span>(x * r, y * r, z * r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Line3</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    Point3 s, e;</span><br><span class="line">    <span class="built_in">Line3</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">Line3</span>(Point3 _s, Point3 _e)</span><br><span class="line">    &#123;</span><br><span class="line">        s = _s;</span><br><span class="line">        e = _e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> Line3 v)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in"><span class="keyword">return</span></span> (s == v.s) &amp;&amp; (e == v.e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        s.<span class="built_in">input</span>();</span><br><span class="line">        e.<span class="built_in">input</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">length</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s.<span class="built_in">distance</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//点到直线距离</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">dispointtoline</span><span class="params">(Point3 p)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ((e - s) ^ (p - s)).<span class="built_in">len</span>() / s.<span class="built_in">distance</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//点到线段距离</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">dispointtoseg</span><span class="params">(Point3 p)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">sgn</span>((p - s) * (e - s)) &lt; <span class="number">0</span> || <span class="built_in">sgn</span>((p - e) * (s - e)) &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">min</span>(p.<span class="built_in">distance</span>(s), e.<span class="built_in">distance</span>(p));</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">dispointtoline</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//`返回点p在直线上的投影`</span></span><br><span class="line">    <span class="function">Point3 <span class="title">lineprog</span><span class="params">(Point3 p)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s + (((e - s) * ((e - s) * (p - s))) / ((e - s).<span class="built_in">len2</span>()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//`p绕此向量逆时针arg角度`</span></span><br><span class="line">    <span class="function">Point3 <span class="title">rotate</span><span class="params">(Point3 p, <span class="keyword">double</span> ang)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">sgn</span>(((s - p) ^ (e - p)).<span class="built_in">len</span>()) == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        Point3 f1 = (e - s) ^ (p - s);</span><br><span class="line">        Point3 f2 = (e - s) ^ (f1);</span><br><span class="line">        <span class="keyword">double</span> len = ((s - p) ^ (e - p)).<span class="built_in">len</span>() / s.<span class="built_in">distance</span>(e);</span><br><span class="line">        f1 = f1.<span class="built_in">trunc</span>(len);</span><br><span class="line">        f2 = f2.<span class="built_in">trunc</span>(len);</span><br><span class="line">        Point3 h = p + f2;</span><br><span class="line">        Point3 pp = h + f1;</span><br><span class="line">        <span class="keyword">return</span> h + ((p - h) * <span class="built_in">cos</span>(ang)) + ((pp - h) * <span class="built_in">sin</span>(ang));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//`点在直线上`</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">pointonseg</span><span class="params">(Point3 p)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sgn</span>(((s - p) ^ (e - p)).<span class="built_in">len</span>()) == <span class="number">0</span> &amp;&amp; <span class="built_in">sgn</span>((s - p) * (e - p)) == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Plane</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    Point3 a, b, c, o; <span class="comment">//`平面上的三个点，以及法向量`</span></span><br><span class="line">    <span class="built_in">Plane</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">Plane</span>(Point3 _a, Point3 _b, Point3 _c)</span><br><span class="line">    &#123;</span><br><span class="line">        a = _a;</span><br><span class="line">        b = _b;</span><br><span class="line">        c = _c;</span><br><span class="line">        o = <span class="built_in">pvec</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Point3 <span class="title">pvec</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (b - a) ^ (c - a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//`ax+by+cz+d = 0`</span></span><br><span class="line">    <span class="built_in">Plane</span>(<span class="keyword">double</span> _a, <span class="keyword">double</span> _b, <span class="keyword">double</span> _c, <span class="keyword">double</span> _d)</span><br><span class="line">    &#123;</span><br><span class="line">        o = <span class="built_in">Point3</span>(_a, _b, _c);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">sgn</span>(_a) != <span class="number">0</span>)</span><br><span class="line">            a = <span class="built_in">Point3</span>((-_d - _c - _b) / _a, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">sgn</span>(_b) != <span class="number">0</span>)</span><br><span class="line">            a = <span class="built_in">Point3</span>(<span class="number">1</span>, (-_d - _c - _a) / _b, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">sgn</span>(_c) != <span class="number">0</span>)</span><br><span class="line">            a = <span class="built_in">Point3</span>(<span class="number">1</span>, <span class="number">1</span>, (-_d - _a - _b) / _c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//`点在平面上的判断`</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">pointonplane</span><span class="params">(Point3 p)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sgn</span>((p - a) * o) == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//`两平面夹角`</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">angleplane</span><span class="params">(Plane f)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">acos</span>(o * f.o) / (o.<span class="built_in">len</span>() * f.o.<span class="built_in">len</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//`平面和直线的交点，返回值是交点个数`</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">crossline</span><span class="params">(Line3 u, Point3 &amp;p)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> x = o * (u.e - a);</span><br><span class="line">        <span class="keyword">double</span> y = o * (u.s - a);</span><br><span class="line">        <span class="keyword">double</span> d = x - y;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">sgn</span>(d) == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        p = ((u.s * x) - (u.e * y)) / d;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//`点到平面最近点(也就是投影)`</span></span><br><span class="line">    <span class="function">Point3 <span class="title">pointtoplane</span><span class="params">(Point3 p)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Line3 u = <span class="built_in">Line3</span>(p, p + o);</span><br><span class="line">        <span class="built_in">crossline</span>(u, p);</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//`平面和平面的交线`</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">crossplane</span><span class="params">(Plane f, Line3 &amp;u)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Point3 oo = o ^ f.o;</span><br><span class="line">        Point3 v = o ^ oo;</span><br><span class="line">        <span class="keyword">double</span> d = <span class="built_in">fabs</span>(f.o * v);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">sgn</span>(d) == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        Point3 q = a + (v * (f.o * (f.a - a)) / d);</span><br><span class="line">        u = <span class="built_in">Line3</span>(q, q + oo);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h4 id="7-3-平面最近点对"><a href="#7-3-平面最近点对" class="headerlink" title="7.3 平面最近点对"></a>7.3 平面最近点对</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> INF = <span class="number">1e20</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x, y;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dist</span><span class="params">(Point a, Point b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));</span><br><span class="line">&#125;</span><br><span class="line">Point p[MAXN];</span><br><span class="line">Point tmpt[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmpx</span><span class="params">(Point a, Point b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.x &lt; b.x || (a.x == b.x &amp;&amp; a.y &lt; b.y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmpy</span><span class="params">(Point a, Point b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.y &lt; b.y || (a.y == b.y &amp;&amp; a.x &lt; b.x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Closest_Pair</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> d = INF;</span><br><span class="line">    <span class="keyword">if</span> (left == right)</span><br><span class="line">        <span class="keyword">return</span> d;</span><br><span class="line">    <span class="keyword">if</span> (left + <span class="number">1</span> == right)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">dist</span>(p[left], p[right]);</span><br><span class="line">    <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">double</span> d1 = <span class="built_in">Closest_Pair</span>(left, mid);</span><br><span class="line">    <span class="keyword">double</span> d2 = <span class="built_in">Closest_Pair</span>(mid + <span class="number">1</span>, right);</span><br><span class="line">    d = <span class="built_in">min</span>(d1, d2);</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = left; i &lt;= right; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">fabs</span>(p[mid].x - p[i].x) &lt;= d)</span><br><span class="line">            tmpt[cnt++] = p[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(tmpt, tmpt + cnt, cmpy);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cnt; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; cnt &amp;&amp; tmpt[j].y - tmpt[i].y &lt; d; j++)</span><br><span class="line">            d = <span class="built_in">min</span>(d, <span class="built_in">dist</span>(tmpt[i], tmpt[j]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n) == <span class="number">1</span> &amp;&amp; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            p[i].<span class="built_in">input</span>();</span><br><span class="line">        <span class="built_in">sort</span>(p, p + n, cmpx);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.2lf\n&quot;</span>, <span class="built_in">Closest_Pair</span>(<span class="number">0</span>, n - <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="7-4-三维凸包"><a href="#7-4-三维凸包" class="headerlink" title="7.4 三维凸包"></a>7.4 三维凸包</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">550</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sgn</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">fabs</span>(x) &lt; eps)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(x &lt; <span class="number">0</span>)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point3</span>&#123;</span></span><br><span class="line">	<span class="keyword">double</span> x,y,z;</span><br><span class="line">	<span class="built_in">Point3</span>(<span class="keyword">double</span> _x = <span class="number">0</span>, <span class="keyword">double</span> _y = <span class="number">0</span>, <span class="keyword">double</span> _z = <span class="number">0</span>)&#123;</span><br><span class="line">		x = _x;</span><br><span class="line">		y = _y;</span><br><span class="line">		z = _z;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf%lf&quot;</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> ==(<span class="keyword">const</span> Point3 &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">sgn</span>(x-b.x) == <span class="number">0</span> &amp;&amp; <span class="built_in">sgn</span>(y-b.y) == <span class="number">0</span> &amp;&amp; <span class="built_in">sgn</span>(z-b.z) == <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">double</span> <span class="title">len</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">sqrt</span>(x*x+y*y+z*z);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">double</span> <span class="title">len2</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> x*x+y*y+z*z;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">double</span> <span class="title">distance</span><span class="params">(<span class="keyword">const</span> Point3 &amp;b)</span><span class="keyword">const</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">sqrt</span>((x-b.x)*(x-b.x)+(y-b.y)*(y-b.y)+(z-b.z)*(z-b.z));</span><br><span class="line">	&#125;</span><br><span class="line">	Point3 <span class="keyword">operator</span> -(<span class="keyword">const</span> Point3 &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">Point3</span>(x-b.x,y-b.y,z-b.z);</span><br><span class="line">	&#125;</span><br><span class="line">	Point3 <span class="keyword">operator</span> +(<span class="keyword">const</span> Point3 &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">Point3</span>(x+b.x,y+b.y,z+b.z);</span><br><span class="line">	&#125;</span><br><span class="line">	Point3 <span class="keyword">operator</span> *(<span class="keyword">const</span> <span class="keyword">double</span> &amp;k)<span class="keyword">const</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">Point3</span>(x*k,y*k,z*k);</span><br><span class="line">	&#125;</span><br><span class="line">	Point3 <span class="keyword">operator</span> /(<span class="keyword">const</span> <span class="keyword">double</span> &amp;k)<span class="keyword">const</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">Point3</span>(x/k,y/k,z/k);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//点乘</span></span><br><span class="line">	<span class="keyword">double</span> <span class="keyword">operator</span> *(<span class="keyword">const</span> Point3 &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> x*b.x + y*b.y + z*b.z;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//叉乘</span></span><br><span class="line">	Point3 <span class="keyword">operator</span> ^(<span class="keyword">const</span> Point3 &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">Point3</span>(y*b.z-z*b.y,z*b.x-x*b.z,x*b.y-y*b.x);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CH3D</span>&#123;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">face</span>&#123;</span></span><br><span class="line">		<span class="comment">//表示凸包一个面上的三个点的编号</span></span><br><span class="line">		<span class="keyword">int</span> a,b,c;</span><br><span class="line">		<span class="comment">//表示该面是否属于最终的凸包上的面</span></span><br><span class="line">		<span class="keyword">bool</span> ok;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="comment">//初始顶点数</span></span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	Point3 P[MAXN];</span><br><span class="line">	<span class="comment">//凸包表面的三角形数</span></span><br><span class="line">	<span class="keyword">int</span> num;</span><br><span class="line">	<span class="comment">//凸包表面的三角形</span></span><br><span class="line">	face F[<span class="number">8</span>*MAXN];</span><br><span class="line">	<span class="keyword">int</span> g[MAXN][MAXN];</span><br><span class="line">	<span class="comment">//叉乘</span></span><br><span class="line">	<span class="function">Point3 <span class="title">cross</span><span class="params">(<span class="keyword">const</span> Point3 &amp;a,<span class="keyword">const</span> Point3 &amp;b,<span class="keyword">const</span> Point3 &amp;c)</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (b-a)^(c-a);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//`三角形面积*2`</span></span><br><span class="line">	<span class="function"><span class="keyword">double</span> <span class="title">area</span><span class="params">(Point3 a,Point3 b,Point3 c)</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> ((b-a)^(c-a)).<span class="built_in">len</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//`四面体有向面积*6`</span></span><br><span class="line">	<span class="function"><span class="keyword">double</span> <span class="title">volume</span><span class="params">(Point3 a,Point3 b,Point3 c,Point3 d)</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> ((b-a)^(c-a))*(d-a);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//`正：点在面同向`</span></span><br><span class="line">	<span class="function"><span class="keyword">double</span> <span class="title">dblcmp</span><span class="params">(Point3 &amp;p,face &amp;f)</span></span>&#123;</span><br><span class="line">		Point3 p1 = P[f.b] - P[f.a];</span><br><span class="line">		Point3 p2 = P[f.c] - P[f.a];</span><br><span class="line">		Point3 p3 = p - P[f.a];</span><br><span class="line">		<span class="keyword">return</span> (p1^p2)*p3;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">deal</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> f = g[a][b];</span><br><span class="line">		face add;</span><br><span class="line">		<span class="keyword">if</span>(F[f].ok)&#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">dblcmp</span>(P[p],F[f]) &gt; eps)</span><br><span class="line">				<span class="built_in">dfs</span>(p,f);</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				add.a = b;</span><br><span class="line">				add.b = a;</span><br><span class="line">				add.c = p;</span><br><span class="line">				add.ok = <span class="literal">true</span>;</span><br><span class="line">				g[p][b] = g[a][p] = g[b][a] = num;</span><br><span class="line">				F[num++] = add;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//递归搜索所有应该从凸包内删除的面</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> now)</span></span>&#123;</span><br><span class="line">		F[now].ok = <span class="literal">false</span>;</span><br><span class="line">		<span class="built_in">deal</span>(p,F[now].b,F[now].a);</span><br><span class="line">		<span class="built_in">deal</span>(p,F[now].c,F[now].b);</span><br><span class="line">		<span class="built_in">deal</span>(p,F[now].a,F[now].c);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">same</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">		Point3 &amp;a = P[F[s].a];</span><br><span class="line">		Point3 &amp;b = P[F[s].b];</span><br><span class="line">		Point3 &amp;c = P[F[s].c];</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">fabs</span>(<span class="built_in">volume</span>(a,b,c,P[F[t].a])) &lt; eps &amp;&amp;</span><br><span class="line">			<span class="built_in">fabs</span>(<span class="built_in">volume</span>(a,b,c,P[F[t].b])) &lt; eps &amp;&amp;</span><br><span class="line">			<span class="built_in">fabs</span>(<span class="built_in">volume</span>(a,b,c,P[F[t].c])) &lt; eps;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//构建三维凸包</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">create</span><span class="params">()</span></span>&#123;</span><br><span class="line">		num = <span class="number">0</span>;</span><br><span class="line">		face add;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//***********************************</span></span><br><span class="line">		<span class="comment">//此段是为了保证前四个点不共面</span></span><br><span class="line">		<span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; n;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(!(P[<span class="number">0</span>] == P[i]))&#123;</span><br><span class="line">				<span class="built_in">swap</span>(P[<span class="number">1</span>],P[i]);</span><br><span class="line">				flag = <span class="literal">false</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(flag)<span class="keyword">return</span>;</span><br><span class="line">		flag = <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt; n;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>( ((P[<span class="number">1</span>]-P[<span class="number">0</span>])^(P[i]-P[<span class="number">0</span>])).<span class="built_in">len</span>() &gt; eps )&#123;</span><br><span class="line">				<span class="built_in">swap</span>(P[<span class="number">2</span>],P[i]);</span><br><span class="line">				flag = <span class="literal">false</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(flag)<span class="keyword">return</span>;</span><br><span class="line">		flag = <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>;i &lt; n;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">fabs</span>( ((P[<span class="number">1</span>]-P[<span class="number">0</span>])^(P[<span class="number">2</span>]-P[<span class="number">0</span>]))*(P[i]-P[<span class="number">0</span>]) ) &gt; eps)&#123;</span><br><span class="line">				<span class="built_in">swap</span>(P[<span class="number">3</span>],P[i]);</span><br><span class="line">				flag = <span class="literal">false</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(flag)<span class="keyword">return</span>;</span><br><span class="line">		<span class="comment">//**********************************</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">4</span>;i++)&#123;</span><br><span class="line">			add.a = (i+<span class="number">1</span>)%<span class="number">4</span>;</span><br><span class="line">			add.b = (i+<span class="number">2</span>)%<span class="number">4</span>;</span><br><span class="line">			add.c = (i+<span class="number">3</span>)%<span class="number">4</span>;</span><br><span class="line">			add.ok = <span class="literal">true</span>;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">dblcmp</span>(P[i],add) &gt; <span class="number">0</span>)<span class="built_in">swap</span>(add.b,add.c);</span><br><span class="line">			g[add.a][add.b] = g[add.b][add.c] = g[add.c][add.a] = num;</span><br><span class="line">			F[num++] = add;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">4</span>;i &lt; n;i++)</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; num;j++)</span><br><span class="line">				<span class="keyword">if</span>(F[j].ok &amp;&amp; <span class="built_in">dblcmp</span>(P[i],F[j]) &gt; eps)&#123;</span><br><span class="line">					<span class="built_in">dfs</span>(i,j);</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">		<span class="keyword">int</span> tmp = num;</span><br><span class="line">		num = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; tmp;i++)</span><br><span class="line">			<span class="keyword">if</span>(F[i].ok)</span><br><span class="line">				F[num++] = F[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//表面积</span></span><br><span class="line">	<span class="comment">//`测试：HDU3528`</span></span><br><span class="line">	<span class="function"><span class="keyword">double</span> <span class="title">area</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">double</span> res = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span>(n == <span class="number">3</span>)&#123;</span><br><span class="line">			Point3 p = <span class="built_in">cross</span>(P[<span class="number">0</span>],P[<span class="number">1</span>],P[<span class="number">2</span>]);</span><br><span class="line">			<span class="keyword">return</span> p.<span class="built_in">len</span>()/<span class="number">2</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; num;i++)</span><br><span class="line">			res += <span class="built_in">area</span>(P[F[i].a],P[F[i].b],P[F[i].c]);</span><br><span class="line">		<span class="keyword">return</span> res/<span class="number">2.0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">double</span> <span class="title">volume</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">double</span> res = <span class="number">0</span>;</span><br><span class="line">		Point3 tmp = <span class="built_in">Point3</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; num;i++)</span><br><span class="line">			res += <span class="built_in">volume</span>(tmp,P[F[i].a],P[F[i].b],P[F[i].c]);</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">fabs</span>(res/<span class="number">6</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//表面三角形个数</span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">triangle</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> num;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//表面多边形个数</span></span><br><span class="line">	<span class="comment">//`测试：HDU3662`</span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">polygon</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; num;i++)&#123;</span><br><span class="line">			<span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; i;j++)</span><br><span class="line">				<span class="keyword">if</span>(<span class="built_in">same</span>(i,j))&#123;</span><br><span class="line">					flag = <span class="number">0</span>;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			res += flag;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//重心</span></span><br><span class="line">	<span class="comment">//`测试：HDU4273`</span></span><br><span class="line">	<span class="function">Point3 <span class="title">barycenter</span><span class="params">()</span></span>&#123;</span><br><span class="line">		Point3 ans = <span class="built_in">Point3</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">		Point3 o = <span class="built_in">Point3</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">		<span class="keyword">double</span> all = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; num;i++)&#123;</span><br><span class="line">			<span class="keyword">double</span> vol = <span class="built_in">volume</span>(o,P[F[i].a],P[F[i].b],P[F[i].c]);</span><br><span class="line">			ans = ans + (((o+P[F[i].a]+P[F[i].b]+P[F[i].c])/<span class="number">4.0</span>)*vol);</span><br><span class="line">			all += vol;</span><br><span class="line">		&#125;</span><br><span class="line">		ans = ans/all;</span><br><span class="line">		<span class="keyword">return</span> ans;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//点到面的距离</span></span><br><span class="line">	<span class="comment">//`测试：HDU4273`</span></span><br><span class="line">	<span class="function"><span class="keyword">double</span> <span class="title">ptoface</span><span class="params">(Point3 p,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">		<span class="keyword">double</span> tmp1 = <span class="built_in">fabs</span>(<span class="built_in">volume</span>(P[F[i].a],P[F[i].b],P[F[i].c],p));</span><br><span class="line">		<span class="keyword">double</span> tmp2 = ((P[F[i].b]-P[F[i].a])^(P[F[i].c]-P[F[i].a])).<span class="built_in">len</span>();</span><br><span class="line">		<span class="keyword">return</span> tmp1/tmp2;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line">CH3D hull;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;hull.n) == <span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; hull.n;i++)hull.P[i].<span class="built_in">input</span>();</span><br><span class="line">		hull.<span class="built_in">create</span>();</span><br><span class="line">		Point3 p = hull.<span class="built_in">barycenter</span>();</span><br><span class="line">		<span class="keyword">double</span> ans = <span class="number">1e20</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; hull.num;i++)</span><br><span class="line">			ans = <span class="built_in">min</span>(ans,hull.<span class="built_in">ptoface</span>(p,i));</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%.3lf\n&quot;</span>,ans);</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>template</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>Template</tag>
      </tags>
  </entry>
</search>
